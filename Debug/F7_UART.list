
F7_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a64  08003a64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003adc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003adc  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087a0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001683  00000000  00000000  00028840  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  00029ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002a620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000253a7  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065fc  00000000  00000000  00050057  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e566f  00000000  00000000  00056653  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bcc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002388  00000000  00000000  0013bd40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003980 	.word	0x08003980

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003980 	.word	0x08003980

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fb01 	bl	8000bf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f822 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8ca 	bl	8000790 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f898 	bl	8000730 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  CMSIS_Init();
 8000600:	f000 f92c 	bl	800085c <CMSIS_Init>
  NVIC_EnableIRQ(USART3_IRQn);
 8000604:	2027      	movs	r0, #39	; 0x27
 8000606:	f7ff ffd3 	bl	80005b0 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (GPIOC->IDR & (0x01 << 13)) {
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x48>)
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <main+0x38>
      GPIOB->ODR |= (0x01 << 7);
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0x4c>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <main+0x4c>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	e7f2      	b.n	800060a <main+0x1e>
    } else {
      GPIOB->ODR &= ~(0x01 << 7);
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <main+0x4c>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <main+0x4c>)
 800062a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800062e:	6153      	str	r3, [r2, #20]
    if (GPIOC->IDR & (0x01 << 13)) {
 8000630:	e7eb      	b.n	800060a <main+0x1e>
 8000632:	bf00      	nop
 8000634:	40020800 	.word	0x40020800
 8000638:	40020400 	.word	0x40020400

0800063c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b0b4      	sub	sp, #208	; 0xd0
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 faac 	bl	8002ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2284      	movs	r2, #132	; 0x84
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fa9d 	bl	8002ba8 <memset>

  /** Configure the main internal regulator output voltage 
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <SystemClock_Config+0xec>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <SystemClock_Config+0xec>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <SystemClock_Config+0xec>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xf0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xf0>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xf0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2310      	movs	r3, #16
 80006b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fda0 	bl	8001204 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x92>
    Error_Handler();
 80006ca:	f000 f91d 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f82a 	bl	800174c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
    Error_Handler();
 80006fe:	f000 f903 	bl	8000908 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000708:	2300      	movs	r3, #0
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f9ed 	bl	8001af0 <HAL_RCCEx_PeriphCLKConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xe4>
    Error_Handler();
 800071c:	f000 f8f4 	bl	8000908 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	37d0      	adds	r7, #208	; 0xd0
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART3_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_USART3_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART3_UART_Init+0x58>)
 800073c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART3_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART3_UART_Init+0x58>)
 8000774:	f001 fdaa 	bl	80022cc <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f8c3 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000098 	.word	0x20000098
 800078c:	40004800 	.word	0x40004800

08000790 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a29      	ldr	r2, [pc, #164]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a23      	ldr	r2, [pc, #140]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_GPIO_Init+0xc4>)
 800080c:	f000 fce0 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_GPIO_Init+0xc8>)
 8000826:	f000 fb29 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0xc4>)
 8000842:	f000 fb1b 	bl	8000e7c <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400
 8000858:	40020800 	.word	0x40020800

0800085c <CMSIS_Init>:
/* USER CODE BEGIN 4 */

/**
 * @brief CMSIS Initialization Function
 */
static void CMSIS_Init(void) {
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /** Configure register to output to LED */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <CMSIS_Init+0x58>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <CMSIS_Init+0x58>)
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB->MODER |= (0x01 << (7 * 2)); // 0x01 push-pull
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <CMSIS_Init+0x5c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <CMSIS_Init+0x5c>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6013      	str	r3, [r2, #0]
  /** Configure register to read button */
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <CMSIS_Init+0x58>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <CMSIS_Init+0x58>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOC->MODER &= ~(0x01 << (13 * 2)); // Clear bit to ensure input
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <CMSIS_Init+0x60>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <CMSIS_Init+0x60>)
 800088a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800088e:	6013      	str	r3, [r2, #0]
  GPIOC->PUPDR &= ~(0x03 << (13 * 2)); // Clear pullup/pulldown register
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <CMSIS_Init+0x60>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a09      	ldr	r2, [pc, #36]	; (80008bc <CMSIS_Init+0x60>)
 8000896:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800089a:	60d3      	str	r3, [r2, #12]

  /** Enable Transmit / Receive / Parity Error interrupt / Receive not empty interrupt */
  USART3->CR1 |= (USART_CR1_TE | USART_CR1_RE| USART_CR1_PEIE | USART_CR1_RXNEIE);
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <CMSIS_Init+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <CMSIS_Init+0x64>)
 80008a2:	f443 7396 	orr.w	r3, r3, #300	; 0x12c
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40004800 	.word	0x40004800

080008c4 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  if (USART3->ISR & USART_ISR_RXNE) { // If RX not empty
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <USART3_IRQHandler+0x38>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00d      	beq.n	80008f2 <USART3_IRQHandler+0x2e>
    char temp = USART3->RDR; // Receive data register
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <USART3_IRQHandler+0x38>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	71fb      	strb	r3, [r7, #7]
    printf("Char received: %s", temp);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4619      	mov	r1, r3
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <USART3_IRQHandler+0x3c>)
 80008e2:	f002 f969 	bl	8002bb8 <iprintf>
    // Flash the LED for every byte (send more bytes to and observe longer period of illumination)
    GPIOB->ODR |= (0x01 << 7);
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <USART3_IRQHandler+0x40>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a06      	ldr	r2, [pc, #24]	; (8000904 <USART3_IRQHandler+0x40>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6153      	str	r3, [r2, #20]
  }
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40004800 	.word	0x40004800
 8000900:	08003998 	.word	0x08003998
 8000904:	40020400 	.word	0x40020400

08000908 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_UART_MspInit+0x7c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d128      	bne.n	80009d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0x80>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0x80>)
 8000988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0x80>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0x80>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0x80>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_UART_MspInit+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c4:	2307      	movs	r3, #7
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_UART_MspInit+0x84>)
 80009d0:	f000 fa54 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004800 	.word	0x40004800
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020c00 	.word	0x40020c00

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3c:	f000 f918 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e00a      	b.n	8000a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a56:	f3af 8000 	nop.w
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf0      	blt.n	8000a56 <_read+0x12>
	}

return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e009      	b.n	8000aa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf1      	blt.n	8000a90 <_write+0x12>
	}
	return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_close>:

int _close(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x16>
		heap_end = &end;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <_sbrk+0x50>)
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <_sbrk+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <_sbrk+0x50>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <_sbrk+0x50>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	466a      	mov	r2, sp
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d907      	bls.n	8000b5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b4a:	f002 f803 	bl	8002b54 <__errno>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	230c      	movs	r3, #12
 8000b52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b58:	e006      	b.n	8000b68 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <_sbrk+0x50>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <_sbrk+0x50>)
 8000b64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000008c 	.word	0x2000008c
 8000b74:	20000120 	.word	0x20000120

08000b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SystemInit+0x28>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <SystemInit+0x28>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SystemInit+0x28>)
 8000b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b92:	609a      	str	r2, [r3, #8]
#endif
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
  ldr  r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ffd3 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f001 ffc5 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fd09 	bl	80005ec <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000be0:	08003a6c 	.word	0x08003a6c
  ldr  r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000bec:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000bf0:	20000120 	.word	0x20000120

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>

08000bf6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 f90a 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f805 	bl	8000c10 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c06:	f7ff fe87 	bl	8000918 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f917 	bl	8000e62 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 f8ed 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000118 	.word	0x20000118

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000118 	.word	0x20000118

08000cb0 <__NVIC_SetPriorityGrouping>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	05fa0000 	.word	0x05fa0000

08000cf8 <__NVIC_GetPriorityGrouping>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff47 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff5c 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb0 	bl	8000dd0 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	e175      	b.n	8001188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f040 8164 	bne.w	8001182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d00b      	beq.n	8000eda <HAL_GPIO_Init+0x5e>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d007      	beq.n	8000eda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ece:	2b11      	cmp	r3, #17
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b12      	cmp	r3, #18
 8000ed8:	d130      	bne.n	8000f3c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x100>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b12      	cmp	r3, #18
 8000f7a:	d123      	bne.n	8000fc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	69b9      	ldr	r1, [r7, #24]
 8000fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0203 	and.w	r2, r3, #3
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80be 	beq.w	8001182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b65      	ldr	r3, [pc, #404]	; (800119c <HAL_GPIO_Init+0x320>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a64      	ldr	r2, [pc, #400]	; (800119c <HAL_GPIO_Init+0x320>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b62      	ldr	r3, [pc, #392]	; (800119c <HAL_GPIO_Init+0x320>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800101e:	4a60      	ldr	r2, [pc, #384]	; (80011a0 <HAL_GPIO_Init+0x324>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <HAL_GPIO_Init+0x328>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d037      	beq.n	80010ba <HAL_GPIO_Init+0x23e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a56      	ldr	r2, [pc, #344]	; (80011a8 <HAL_GPIO_Init+0x32c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d031      	beq.n	80010b6 <HAL_GPIO_Init+0x23a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_GPIO_Init+0x330>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d02b      	beq.n	80010b2 <HAL_GPIO_Init+0x236>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <HAL_GPIO_Init+0x334>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x232>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <HAL_GPIO_Init+0x338>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x22e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x33c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x22a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x340>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x226>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_GPIO_Init+0x344>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x222>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x348>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x21e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x21a>
 8001092:	2309      	movs	r3, #9
 8001094:	e012      	b.n	80010bc <HAL_GPIO_Init+0x240>
 8001096:	230a      	movs	r3, #10
 8001098:	e010      	b.n	80010bc <HAL_GPIO_Init+0x240>
 800109a:	2308      	movs	r3, #8
 800109c:	e00e      	b.n	80010bc <HAL_GPIO_Init+0x240>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00c      	b.n	80010bc <HAL_GPIO_Init+0x240>
 80010a2:	2306      	movs	r3, #6
 80010a4:	e00a      	b.n	80010bc <HAL_GPIO_Init+0x240>
 80010a6:	2305      	movs	r3, #5
 80010a8:	e008      	b.n	80010bc <HAL_GPIO_Init+0x240>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x240>
 80010ae:	2303      	movs	r3, #3
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x240>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x240>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x240>
 80010ba:	2300      	movs	r3, #0
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010cc:	4934      	ldr	r1, [pc, #208]	; (80011a0 <HAL_GPIO_Init+0x324>)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010da:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <HAL_GPIO_Init+0x350>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <HAL_GPIO_Init+0x350>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_GPIO_Init+0x350>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <HAL_GPIO_Init+0x350>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_GPIO_Init+0x350>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_GPIO_Init+0x350>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_GPIO_Init+0x350>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_GPIO_Init+0x350>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b0f      	cmp	r3, #15
 800118c:	f67f ae86 	bls.w	8000e9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001190:	bf00      	nop
 8001192:	3724      	adds	r7, #36	; 0x24
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40021800 	.word	0x40021800
 80011c0:	40021c00 	.word	0x40021c00
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40022400 	.word	0x40022400
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e291      	b.n	800173e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8087 	beq.w	8001336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001228:	4b96      	ldr	r3, [pc, #600]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00c      	beq.n	800124e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001234:	4b93      	ldr	r3, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d112      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
 8001240:	4b90      	ldr	r3, [pc, #576]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124c:	d10b      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124e:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d06c      	beq.n	8001334 <HAL_RCC_OscConfig+0x130>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d168      	bne.n	8001334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e26b      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x7a>
 8001270:	4b84      	ldr	r3, [pc, #528]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a83      	ldr	r2, [pc, #524]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e02e      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x9c>
 8001286:	4b7f      	ldr	r3, [pc, #508]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7e      	ldr	r2, [pc, #504]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b7c      	ldr	r3, [pc, #496]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7b      	ldr	r2, [pc, #492]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b73      	ldr	r3, [pc, #460]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a72      	ldr	r2, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xd8>
 80012c4:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6e      	ldr	r2, [pc, #440]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6b      	ldr	r2, [pc, #428]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcd8 	bl	8000c98 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcd4 	bl	8000c98 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e21f      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b61      	ldr	r3, [pc, #388]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fcc4 	bl	8000c98 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcc0 	bl	8000c98 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e20b      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x110>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d069      	beq.n	8001416 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001342:	4b50      	ldr	r3, [pc, #320]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b08      	cmp	r3, #8
 8001358:	d11c      	bne.n	8001394 <HAL_RCC_OscConfig+0x190>
 800135a:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x17a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1df      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	493d      	ldr	r1, [pc, #244]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	e040      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d023      	beq.n	80013e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a38      	ldr	r2, [pc, #224]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc76 	bl	8000c98 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc72 	bl	8000c98 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1bd      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4929      	ldr	r1, [pc, #164]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
 80013e2:	e018      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc52 	bl	8000c98 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc4e 	bl	8000c98 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e199      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d038      	beq.n	8001494 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff fc2f 	bl	8000c98 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fc2b 	bl	8000c98 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e176      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x23a>
 800145c:	e01a      	b.n	8001494 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_RCC_OscConfig+0x280>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146a:	f7ff fc15 	bl	8000c98 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc11 	bl	8000c98 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d903      	bls.n	8001488 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e15c      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
 8001484:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b91      	ldr	r3, [pc, #580]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a4 	beq.w	80015ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10d      	bne.n	80014ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a87      	ldr	r2, [pc, #540]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ca:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014d6:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7e      	ldr	r2, [pc, #504]	; (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fbd9 	bl	8000c98 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fbd5 	bl	8000c98 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e120      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fc:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x4d0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x31a>
 8001510:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a6e      	ldr	r2, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e02d      	b.n	800157a <HAL_RCC_OscConfig+0x376>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x33c>
 8001526:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a69      	ldr	r2, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a66      	ldr	r2, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x376>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x35e>
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a60      	ldr	r2, [pc, #384]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a5d      	ldr	r2, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x376>
 8001562:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a5a      	ldr	r2, [pc, #360]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff fb89 	bl	8000c98 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fb85 	bl	8000c98 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0ce      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x386>
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb73 	bl	8000c98 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fb6f 	bl	8000c98 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a3b      	ldr	r2, [pc, #236]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80a4 	beq.w	800173c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d06b      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d149      	bne.n	800169c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800160e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fb40 	bl	8000c98 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb3c 	bl	8000c98 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e087      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	3b01      	subs	r3, #1
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	4313      	orrs	r3, r2
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001666:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fb10 	bl	8000c98 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb0c 	bl	8000c98 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e057      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x478>
 800169a:	e04f      	b.n	800173c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80016a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff faf6 	bl	8000c98 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff faf2 	bl	8000c98 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e03d      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4ac>
 80016ce:	e035      	b.n	800173c <HAL_RCC_OscConfig+0x538>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x544>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d028      	beq.n	8001738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d121      	bne.n	8001738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d11a      	bne.n	8001738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800170e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	4293      	cmp	r3, r2
 8001712:	d111      	bne.n	8001738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0d0      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d910      	bls.n	8001794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 020f 	bic.w	r2, r3, #15
 800177a:	4965      	ldr	r1, [pc, #404]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b8      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a58      	ldr	r2, [pc, #352]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	494d      	ldr	r1, [pc, #308]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d040      	beq.n	8001870 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d115      	bne.n	800182e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e073      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06b      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4936      	ldr	r1, [pc, #216]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001840:	f7ff fa2a 	bl	8000c98 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fa26 	bl	8000c98 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e053      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d210      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 020f 	bic.w	r2, r3, #15
 8001886:	4922      	ldr	r1, [pc, #136]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e032      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4916      	ldr	r1, [pc, #88]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	490e      	ldr	r1, [pc, #56]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018de:	f000 f821 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018e2:	4601      	mov	r1, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x1cc>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	fa21 f303 	lsr.w	r3, r1, r3
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1d0>)
 80018f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1d4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f986 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00
 8001914:	40023800 	.word	0x40023800
 8001918:	080039ac 	.word	0x080039ac
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x158>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b04      	cmp	r3, #4
 8001944:	d007      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x32>
 8001946:	2b08      	cmp	r3, #8
 8001948:	d008      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x38>
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 808d 	bne.w	8001a6a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001952:	60bb      	str	r3, [r7, #8]
      break;
 8001954:	e08c      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8001958:	60bb      	str	r3, [r7, #8]
      break;
 800195a:	e089      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x158>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001966:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x158>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d023      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x158>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	f04f 0400 	mov.w	r4, #0
 800197c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	ea03 0501 	and.w	r5, r3, r1
 8001988:	ea04 0602 	and.w	r6, r4, r2
 800198c:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800198e:	fb02 f106 	mul.w	r1, r2, r6
 8001992:	2200      	movs	r2, #0
 8001994:	fb02 f205 	mul.w	r2, r2, r5
 8001998:	440a      	add	r2, r1
 800199a:	493a      	ldr	r1, [pc, #232]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800199c:	fba5 0101 	umull	r0, r1, r5, r1
 80019a0:	1853      	adds	r3, r2, r1
 80019a2:	4619      	mov	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f04f 0400 	mov.w	r4, #0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	f7fe fc7f 	bl	80002b0 <__aeabi_uldivmod>
 80019b2:	4603      	mov	r3, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e049      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x158>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	f04f 0400 	mov.w	r4, #0
 80019c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	ea03 0501 	and.w	r5, r3, r1
 80019d0:	ea04 0602 	and.w	r6, r4, r2
 80019d4:	4629      	mov	r1, r5
 80019d6:	4632      	mov	r2, r6
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	0154      	lsls	r4, r2, #5
 80019e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019e6:	014b      	lsls	r3, r1, #5
 80019e8:	4619      	mov	r1, r3
 80019ea:	4622      	mov	r2, r4
 80019ec:	1b49      	subs	r1, r1, r5
 80019ee:	eb62 0206 	sbc.w	r2, r2, r6
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	f04f 0400 	mov.w	r4, #0
 80019fa:	0194      	lsls	r4, r2, #6
 80019fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a00:	018b      	lsls	r3, r1, #6
 8001a02:	1a5b      	subs	r3, r3, r1
 8001a04:	eb64 0402 	sbc.w	r4, r4, r2
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	00e2      	lsls	r2, r4, #3
 8001a12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a16:	00d9      	lsls	r1, r3, #3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4614      	mov	r4, r2
 8001a1c:	195b      	adds	r3, r3, r5
 8001a1e:	eb44 0406 	adc.w	r4, r4, r6
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	02a2      	lsls	r2, r4, #10
 8001a2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a30:	0299      	lsls	r1, r3, #10
 8001a32:	460b      	mov	r3, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	4621      	mov	r1, r4
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 0400 	mov.w	r4, #0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	f7fe fc34 	bl	80002b0 <__aeabi_uldivmod>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	60bb      	str	r3, [r7, #8]
      break;
 8001a68:	e002      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a6c:	60bb      	str	r3, [r7, #8]
      break;
 8001a6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a70:	68bb      	ldr	r3, [r7, #8]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	017d7840 	.word	0x017d7840

08001a88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	080039bc 	.word	0x080039bc

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffdc 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0b5b      	lsrs	r3, r3, #13
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	080039bc 	.word	0x080039bc

08001af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d012      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b18:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a68      	ldr	r2, [pc, #416]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b22:	6093      	str	r3, [r2, #8]
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	4964      	ldr	r1, [pc, #400]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d017      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b58:	4959      	ldr	r1, [pc, #356]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b68:	d101      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d017      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	494a      	ldr	r1, [pc, #296]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ba4:	d101      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 808b 	beq.w	8001cea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a39      	ldr	r2, [pc, #228]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f84e 	bl	8000c98 <HAL_GetTick>
 8001bfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c00:	f7ff f84a 	bl	8000c98 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e355      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d035      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d02e      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d114      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f812 	bl	8000c98 <HAL_GetTick>
 8001c74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7ff f80e 	bl	8000c98 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e317      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ee      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ca6:	d111      	bne.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	4901      	ldr	r1, [pc, #4]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	0ffffcff 	.word	0x0ffffcff
 8001ccc:	4bb0      	ldr	r3, [pc, #704]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4aaf      	ldr	r2, [pc, #700]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cd6:	6093      	str	r3, [r2, #8]
 8001cd8:	4bad      	ldr	r3, [pc, #692]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	49aa      	ldr	r1, [pc, #680]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cf6:	4ba6      	ldr	r3, [pc, #664]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cfc:	4aa4      	ldr	r2, [pc, #656]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d06:	4ba2      	ldr	r3, [pc, #648]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	499f      	ldr	r1, [pc, #636]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d24:	4b9a      	ldr	r3, [pc, #616]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d32:	4997      	ldr	r1, [pc, #604]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d46:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d54:	498e      	ldr	r1, [pc, #568]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d68:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d76:	4986      	ldr	r1, [pc, #536]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d8a:	4b81      	ldr	r3, [pc, #516]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	497d      	ldr	r1, [pc, #500]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dac:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4975      	ldr	r1, [pc, #468]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dce:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f023 020c 	bic.w	r2, r3, #12
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ddc:	496c      	ldr	r1, [pc, #432]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001df0:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4964      	ldr	r1, [pc, #400]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e12:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e20:	495b      	ldr	r1, [pc, #364]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e34:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	4953      	ldr	r1, [pc, #332]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e56:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	494a      	ldr	r1, [pc, #296]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e78:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	4942      	ldr	r1, [pc, #264]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	4939      	ldr	r1, [pc, #228]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eca:	4931      	ldr	r1, [pc, #196]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d011      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eec:	4928      	ldr	r1, [pc, #160]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001efc:	d101      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2c:	4918      	ldr	r1, [pc, #96]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f50:	490f      	ldr	r1, [pc, #60]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f66:	f040 80d8 	bne.w	800211a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001f70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f76:	f7fe fe8f 	bl	8000c98 <HAL_GetTick>
 8001f7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f7e:	f7fe fe8b 	bl	8000c98 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	; 0x64
 8001f8a:	d903      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e196      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001f90:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f94:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d021      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d11d      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fb4:	4b64      	ldr	r3, [pc, #400]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc8:	0e1b      	lsrs	r3, r3, #24
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	019a      	lsls	r2, r3, #6
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	071b      	lsls	r3, r3, #28
 8001fe8:	4957      	ldr	r1, [pc, #348]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02e      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201a:	d129      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800201c:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800201e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002022:	0c1b      	lsrs	r3, r3, #16
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800202c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002030:	0f1b      	lsrs	r3, r3, #28
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	019a      	lsls	r2, r3, #6
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	431a      	orrs	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	071b      	lsls	r3, r3, #28
 8002050:	493d      	ldr	r1, [pc, #244]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800205a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205e:	f023 021f 	bic.w	r2, r3, #31
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	3b01      	subs	r3, #1
 8002068:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01d      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800207e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002082:	0e1b      	lsrs	r3, r3, #24
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800208c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002090:	0f1b      	lsrs	r3, r3, #28
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	019a      	lsls	r2, r3, #6
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	431a      	orrs	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	431a      	orrs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	071b      	lsls	r3, r3, #28
 80020b0:	4925      	ldr	r1, [pc, #148]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d011      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	019a      	lsls	r2, r3, #6
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	061b      	lsls	r3, r3, #24
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	071b      	lsls	r3, r3, #28
 80020e0:	4919      	ldr	r1, [pc, #100]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80020ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7fe fdd0 	bl	8000c98 <HAL_GetTick>
 80020f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020fc:	f7fe fdcc 	bl	8000c98 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0d7      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b01      	cmp	r3, #1
 800211e:	f040 80cd 	bne.w	80022bc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212e:	f7fe fdb3 	bl	8000c98 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002136:	f7fe fdaf 	bl	8000c98 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d903      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0ba      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002148:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800214c:	4b5e      	ldr	r3, [pc, #376]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002158:	d0ed      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002176:	2b00      	cmp	r3, #0
 8002178:	d02e      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d12a      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	0f1b      	lsrs	r3, r3, #28
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	019a      	lsls	r2, r3, #6
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	061b      	lsls	r3, r3, #24
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	071b      	lsls	r3, r3, #28
 80021b6:	4944      	ldr	r1, [pc, #272]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	493d      	ldr	r1, [pc, #244]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d022      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ec:	d11d      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	0e1b      	lsrs	r3, r3, #24
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	0f1b      	lsrs	r3, r3, #28
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	019a      	lsls	r2, r3, #6
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	061b      	lsls	r3, r3, #24
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	071b      	lsls	r3, r3, #28
 8002222:	4929      	ldr	r1, [pc, #164]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	0e1b      	lsrs	r3, r3, #24
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	0c1b      	lsrs	r3, r3, #16
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	019a      	lsls	r2, r3, #6
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	431a      	orrs	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	071b      	lsls	r3, r3, #28
 800226a:	4917      	ldr	r1, [pc, #92]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	4911      	ldr	r1, [pc, #68]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7fe fd00 	bl	8000c98 <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800229c:	f7fe fcfc 	bl	8000c98 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e007      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ba:	d1ef      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e040      	b.n	8002360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fb36 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f82c 	bl	8002368 <UART_SetConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 faca 	bl	80028bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fb51 	bl	8002a00 <UART_CheckIdleState>
 800235e:	4603      	mov	r3, r0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4bb1      	ldr	r3, [pc, #708]	; (800265c <UART_SetConfig+0x2f4>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	6939      	ldr	r1, [r7, #16]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a9f      	ldr	r2, [pc, #636]	; (8002660 <UART_SetConfig+0x2f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d121      	bne.n	800242c <UART_SetConfig+0xc4>
 80023e8:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <UART_SetConfig+0x2fc>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d816      	bhi.n	8002424 <UART_SetConfig+0xbc>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <UART_SetConfig+0x94>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	0800240d 	.word	0x0800240d
 8002400:	08002419 	.word	0x08002419
 8002404:	08002413 	.word	0x08002413
 8002408:	0800241f 	.word	0x0800241f
 800240c:	2301      	movs	r3, #1
 800240e:	77fb      	strb	r3, [r7, #31]
 8002410:	e151      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002412:	2302      	movs	r3, #2
 8002414:	77fb      	strb	r3, [r7, #31]
 8002416:	e14e      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002418:	2304      	movs	r3, #4
 800241a:	77fb      	strb	r3, [r7, #31]
 800241c:	e14b      	b.n	80026b6 <UART_SetConfig+0x34e>
 800241e:	2308      	movs	r3, #8
 8002420:	77fb      	strb	r3, [r7, #31]
 8002422:	e148      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002424:	2310      	movs	r3, #16
 8002426:	77fb      	strb	r3, [r7, #31]
 8002428:	bf00      	nop
 800242a:	e144      	b.n	80026b6 <UART_SetConfig+0x34e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a8d      	ldr	r2, [pc, #564]	; (8002668 <UART_SetConfig+0x300>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d134      	bne.n	80024a0 <UART_SetConfig+0x138>
 8002436:	4b8b      	ldr	r3, [pc, #556]	; (8002664 <UART_SetConfig+0x2fc>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d829      	bhi.n	8002498 <UART_SetConfig+0x130>
 8002444:	a201      	add	r2, pc, #4	; (adr r2, 800244c <UART_SetConfig+0xe4>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	08002481 	.word	0x08002481
 8002450:	08002499 	.word	0x08002499
 8002454:	08002499 	.word	0x08002499
 8002458:	08002499 	.word	0x08002499
 800245c:	0800248d 	.word	0x0800248d
 8002460:	08002499 	.word	0x08002499
 8002464:	08002499 	.word	0x08002499
 8002468:	08002499 	.word	0x08002499
 800246c:	08002487 	.word	0x08002487
 8002470:	08002499 	.word	0x08002499
 8002474:	08002499 	.word	0x08002499
 8002478:	08002499 	.word	0x08002499
 800247c:	08002493 	.word	0x08002493
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
 8002484:	e117      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002486:	2302      	movs	r3, #2
 8002488:	77fb      	strb	r3, [r7, #31]
 800248a:	e114      	b.n	80026b6 <UART_SetConfig+0x34e>
 800248c:	2304      	movs	r3, #4
 800248e:	77fb      	strb	r3, [r7, #31]
 8002490:	e111      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002492:	2308      	movs	r3, #8
 8002494:	77fb      	strb	r3, [r7, #31]
 8002496:	e10e      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002498:	2310      	movs	r3, #16
 800249a:	77fb      	strb	r3, [r7, #31]
 800249c:	bf00      	nop
 800249e:	e10a      	b.n	80026b6 <UART_SetConfig+0x34e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a71      	ldr	r2, [pc, #452]	; (800266c <UART_SetConfig+0x304>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d120      	bne.n	80024ec <UART_SetConfig+0x184>
 80024aa:	4b6e      	ldr	r3, [pc, #440]	; (8002664 <UART_SetConfig+0x2fc>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d00f      	beq.n	80024d8 <UART_SetConfig+0x170>
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d802      	bhi.n	80024c2 <UART_SetConfig+0x15a>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <UART_SetConfig+0x164>
 80024c0:	e010      	b.n	80024e4 <UART_SetConfig+0x17c>
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d005      	beq.n	80024d2 <UART_SetConfig+0x16a>
 80024c6:	2b30      	cmp	r3, #48	; 0x30
 80024c8:	d009      	beq.n	80024de <UART_SetConfig+0x176>
 80024ca:	e00b      	b.n	80024e4 <UART_SetConfig+0x17c>
 80024cc:	2300      	movs	r3, #0
 80024ce:	77fb      	strb	r3, [r7, #31]
 80024d0:	e0f1      	b.n	80026b6 <UART_SetConfig+0x34e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	77fb      	strb	r3, [r7, #31]
 80024d6:	e0ee      	b.n	80026b6 <UART_SetConfig+0x34e>
 80024d8:	2304      	movs	r3, #4
 80024da:	77fb      	strb	r3, [r7, #31]
 80024dc:	e0eb      	b.n	80026b6 <UART_SetConfig+0x34e>
 80024de:	2308      	movs	r3, #8
 80024e0:	77fb      	strb	r3, [r7, #31]
 80024e2:	e0e8      	b.n	80026b6 <UART_SetConfig+0x34e>
 80024e4:	2310      	movs	r3, #16
 80024e6:	77fb      	strb	r3, [r7, #31]
 80024e8:	bf00      	nop
 80024ea:	e0e4      	b.n	80026b6 <UART_SetConfig+0x34e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <UART_SetConfig+0x308>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d120      	bne.n	8002538 <UART_SetConfig+0x1d0>
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <UART_SetConfig+0x2fc>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d00f      	beq.n	8002524 <UART_SetConfig+0x1bc>
 8002504:	2b40      	cmp	r3, #64	; 0x40
 8002506:	d802      	bhi.n	800250e <UART_SetConfig+0x1a6>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <UART_SetConfig+0x1b0>
 800250c:	e010      	b.n	8002530 <UART_SetConfig+0x1c8>
 800250e:	2b80      	cmp	r3, #128	; 0x80
 8002510:	d005      	beq.n	800251e <UART_SetConfig+0x1b6>
 8002512:	2bc0      	cmp	r3, #192	; 0xc0
 8002514:	d009      	beq.n	800252a <UART_SetConfig+0x1c2>
 8002516:	e00b      	b.n	8002530 <UART_SetConfig+0x1c8>
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
 800251c:	e0cb      	b.n	80026b6 <UART_SetConfig+0x34e>
 800251e:	2302      	movs	r3, #2
 8002520:	77fb      	strb	r3, [r7, #31]
 8002522:	e0c8      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002524:	2304      	movs	r3, #4
 8002526:	77fb      	strb	r3, [r7, #31]
 8002528:	e0c5      	b.n	80026b6 <UART_SetConfig+0x34e>
 800252a:	2308      	movs	r3, #8
 800252c:	77fb      	strb	r3, [r7, #31]
 800252e:	e0c2      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002530:	2310      	movs	r3, #16
 8002532:	77fb      	strb	r3, [r7, #31]
 8002534:	bf00      	nop
 8002536:	e0be      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <UART_SetConfig+0x30c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d124      	bne.n	800258c <UART_SetConfig+0x224>
 8002542:	4b48      	ldr	r3, [pc, #288]	; (8002664 <UART_SetConfig+0x2fc>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002550:	d012      	beq.n	8002578 <UART_SetConfig+0x210>
 8002552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002556:	d802      	bhi.n	800255e <UART_SetConfig+0x1f6>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <UART_SetConfig+0x204>
 800255c:	e012      	b.n	8002584 <UART_SetConfig+0x21c>
 800255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002562:	d006      	beq.n	8002572 <UART_SetConfig+0x20a>
 8002564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002568:	d009      	beq.n	800257e <UART_SetConfig+0x216>
 800256a:	e00b      	b.n	8002584 <UART_SetConfig+0x21c>
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
 8002570:	e0a1      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002572:	2302      	movs	r3, #2
 8002574:	77fb      	strb	r3, [r7, #31]
 8002576:	e09e      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002578:	2304      	movs	r3, #4
 800257a:	77fb      	strb	r3, [r7, #31]
 800257c:	e09b      	b.n	80026b6 <UART_SetConfig+0x34e>
 800257e:	2308      	movs	r3, #8
 8002580:	77fb      	strb	r3, [r7, #31]
 8002582:	e098      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002584:	2310      	movs	r3, #16
 8002586:	77fb      	strb	r3, [r7, #31]
 8002588:	bf00      	nop
 800258a:	e094      	b.n	80026b6 <UART_SetConfig+0x34e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a39      	ldr	r2, [pc, #228]	; (8002678 <UART_SetConfig+0x310>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d124      	bne.n	80025e0 <UART_SetConfig+0x278>
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <UART_SetConfig+0x2fc>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d012      	beq.n	80025cc <UART_SetConfig+0x264>
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025aa:	d802      	bhi.n	80025b2 <UART_SetConfig+0x24a>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <UART_SetConfig+0x258>
 80025b0:	e012      	b.n	80025d8 <UART_SetConfig+0x270>
 80025b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b6:	d006      	beq.n	80025c6 <UART_SetConfig+0x25e>
 80025b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025bc:	d009      	beq.n	80025d2 <UART_SetConfig+0x26a>
 80025be:	e00b      	b.n	80025d8 <UART_SetConfig+0x270>
 80025c0:	2301      	movs	r3, #1
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e077      	b.n	80026b6 <UART_SetConfig+0x34e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	77fb      	strb	r3, [r7, #31]
 80025ca:	e074      	b.n	80026b6 <UART_SetConfig+0x34e>
 80025cc:	2304      	movs	r3, #4
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e071      	b.n	80026b6 <UART_SetConfig+0x34e>
 80025d2:	2308      	movs	r3, #8
 80025d4:	77fb      	strb	r3, [r7, #31]
 80025d6:	e06e      	b.n	80026b6 <UART_SetConfig+0x34e>
 80025d8:	2310      	movs	r3, #16
 80025da:	77fb      	strb	r3, [r7, #31]
 80025dc:	bf00      	nop
 80025de:	e06a      	b.n	80026b6 <UART_SetConfig+0x34e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a25      	ldr	r2, [pc, #148]	; (800267c <UART_SetConfig+0x314>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d124      	bne.n	8002634 <UART_SetConfig+0x2cc>
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <UART_SetConfig+0x2fc>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f8:	d012      	beq.n	8002620 <UART_SetConfig+0x2b8>
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fe:	d802      	bhi.n	8002606 <UART_SetConfig+0x29e>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <UART_SetConfig+0x2ac>
 8002604:	e012      	b.n	800262c <UART_SetConfig+0x2c4>
 8002606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260a:	d006      	beq.n	800261a <UART_SetConfig+0x2b2>
 800260c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002610:	d009      	beq.n	8002626 <UART_SetConfig+0x2be>
 8002612:	e00b      	b.n	800262c <UART_SetConfig+0x2c4>
 8002614:	2300      	movs	r3, #0
 8002616:	77fb      	strb	r3, [r7, #31]
 8002618:	e04d      	b.n	80026b6 <UART_SetConfig+0x34e>
 800261a:	2302      	movs	r3, #2
 800261c:	77fb      	strb	r3, [r7, #31]
 800261e:	e04a      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002620:	2304      	movs	r3, #4
 8002622:	77fb      	strb	r3, [r7, #31]
 8002624:	e047      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002626:	2308      	movs	r3, #8
 8002628:	77fb      	strb	r3, [r7, #31]
 800262a:	e044      	b.n	80026b6 <UART_SetConfig+0x34e>
 800262c:	2310      	movs	r3, #16
 800262e:	77fb      	strb	r3, [r7, #31]
 8002630:	bf00      	nop
 8002632:	e040      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a11      	ldr	r2, [pc, #68]	; (8002680 <UART_SetConfig+0x318>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d139      	bne.n	80026b2 <UART_SetConfig+0x34a>
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <UART_SetConfig+0x2fc>)
 8002640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264c:	d027      	beq.n	800269e <UART_SetConfig+0x336>
 800264e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002652:	d817      	bhi.n	8002684 <UART_SetConfig+0x31c>
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01c      	beq.n	8002692 <UART_SetConfig+0x32a>
 8002658:	e027      	b.n	80026aa <UART_SetConfig+0x342>
 800265a:	bf00      	nop
 800265c:	efff69f3 	.word	0xefff69f3
 8002660:	40011000 	.word	0x40011000
 8002664:	40023800 	.word	0x40023800
 8002668:	40004400 	.word	0x40004400
 800266c:	40004800 	.word	0x40004800
 8002670:	40004c00 	.word	0x40004c00
 8002674:	40005000 	.word	0x40005000
 8002678:	40011400 	.word	0x40011400
 800267c:	40007800 	.word	0x40007800
 8002680:	40007c00 	.word	0x40007c00
 8002684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002688:	d006      	beq.n	8002698 <UART_SetConfig+0x330>
 800268a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800268e:	d009      	beq.n	80026a4 <UART_SetConfig+0x33c>
 8002690:	e00b      	b.n	80026aa <UART_SetConfig+0x342>
 8002692:	2300      	movs	r3, #0
 8002694:	77fb      	strb	r3, [r7, #31]
 8002696:	e00e      	b.n	80026b6 <UART_SetConfig+0x34e>
 8002698:	2302      	movs	r3, #2
 800269a:	77fb      	strb	r3, [r7, #31]
 800269c:	e00b      	b.n	80026b6 <UART_SetConfig+0x34e>
 800269e:	2304      	movs	r3, #4
 80026a0:	77fb      	strb	r3, [r7, #31]
 80026a2:	e008      	b.n	80026b6 <UART_SetConfig+0x34e>
 80026a4:	2308      	movs	r3, #8
 80026a6:	77fb      	strb	r3, [r7, #31]
 80026a8:	e005      	b.n	80026b6 <UART_SetConfig+0x34e>
 80026aa:	2310      	movs	r3, #16
 80026ac:	77fb      	strb	r3, [r7, #31]
 80026ae:	bf00      	nop
 80026b0:	e001      	b.n	80026b6 <UART_SetConfig+0x34e>
 80026b2:	2310      	movs	r3, #16
 80026b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026be:	d17f      	bne.n	80027c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80026c0:	7ffb      	ldrb	r3, [r7, #31]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d85c      	bhi.n	8002780 <UART_SetConfig+0x418>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <UART_SetConfig+0x364>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026f1 	.word	0x080026f1
 80026d0:	08002711 	.word	0x08002711
 80026d4:	08002731 	.word	0x08002731
 80026d8:	08002781 	.word	0x08002781
 80026dc:	08002749 	.word	0x08002749
 80026e0:	08002781 	.word	0x08002781
 80026e4:	08002781 	.word	0x08002781
 80026e8:	08002781 	.word	0x08002781
 80026ec:	08002769 	.word	0x08002769
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f0:	f7ff f9d6 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80026f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	005a      	lsls	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	441a      	add	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	b29b      	uxth	r3, r3
 800270c:	61bb      	str	r3, [r7, #24]
        break;
 800270e:	e03a      	b.n	8002786 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002710:	f7ff f9da 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002714:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	005a      	lsls	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	b29b      	uxth	r3, r3
 800272c:	61bb      	str	r3, [r7, #24]
        break;
 800272e:	e02a      	b.n	8002786 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	085a      	lsrs	r2, r3, #1
 8002736:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <UART_SetConfig+0x54c>)
 8002738:	4413      	add	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6852      	ldr	r2, [r2, #4]
 800273e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	61bb      	str	r3, [r7, #24]
        break;
 8002746:	e01e      	b.n	8002786 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002748:	f7ff f8ec 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 800274c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	005a      	lsls	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	b29b      	uxth	r3, r3
 8002764:	61bb      	str	r3, [r7, #24]
        break;
 8002766:	e00e      	b.n	8002786 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	b29b      	uxth	r3, r3
 800277c:	61bb      	str	r3, [r7, #24]
        break;
 800277e:	e002      	b.n	8002786 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	75fb      	strb	r3, [r7, #23]
        break;
 8002784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d916      	bls.n	80027ba <UART_SetConfig+0x452>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002792:	d212      	bcs.n	80027ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f023 030f 	bic.w	r3, r3, #15
 800279c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	897a      	ldrh	r2, [r7, #10]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	e070      	b.n	800289c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
 80027be:	e06d      	b.n	800289c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80027c0:	7ffb      	ldrb	r3, [r7, #31]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d859      	bhi.n	800287a <UART_SetConfig+0x512>
 80027c6:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <UART_SetConfig+0x464>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	080027f1 	.word	0x080027f1
 80027d0:	0800280f 	.word	0x0800280f
 80027d4:	0800282d 	.word	0x0800282d
 80027d8:	0800287b 	.word	0x0800287b
 80027dc:	08002845 	.word	0x08002845
 80027e0:	0800287b 	.word	0x0800287b
 80027e4:	0800287b 	.word	0x0800287b
 80027e8:	0800287b 	.word	0x0800287b
 80027ec:	08002863 	.word	0x08002863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f0:	f7ff f956 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80027f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	085a      	lsrs	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	441a      	add	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	b29b      	uxth	r3, r3
 800280a:	61bb      	str	r3, [r7, #24]
        break;
 800280c:	e038      	b.n	8002880 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800280e:	f7ff f95b 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002812:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	085a      	lsrs	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	b29b      	uxth	r3, r3
 8002828:	61bb      	str	r3, [r7, #24]
        break;
 800282a:	e029      	b.n	8002880 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	085a      	lsrs	r2, r3, #1
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <UART_SetConfig+0x550>)
 8002834:	4413      	add	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6852      	ldr	r2, [r2, #4]
 800283a:	fbb3 f3f2 	udiv	r3, r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	61bb      	str	r3, [r7, #24]
        break;
 8002842:	e01d      	b.n	8002880 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002844:	f7ff f86e 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 8002848:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	085a      	lsrs	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	441a      	add	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	b29b      	uxth	r3, r3
 800285e:	61bb      	str	r3, [r7, #24]
        break;
 8002860:	e00e      	b.n	8002880 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	b29b      	uxth	r3, r3
 8002876:	61bb      	str	r3, [r7, #24]
        break;
 8002878:	e002      	b.n	8002880 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
        break;
 800287e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	d908      	bls.n	8002898 <UART_SetConfig+0x530>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d204      	bcs.n	8002898 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	e001      	b.n	800289c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	01e84800 	.word	0x01e84800
 80028b8:	00f42400 	.word	0x00f42400

080028bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01a      	beq.n	80029d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ba:	d10a      	bne.n	80029d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
  }
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a0e:	f7fe f943 	bl	8000c98 <HAL_GetTick>
 8002a12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d10e      	bne.n	8002a40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f814 	bl	8002a5e <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e00a      	b.n	8002a56 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6e:	e05d      	b.n	8002b2c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a76:	d059      	beq.n	8002b2c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fe f90e 	bl	8000c98 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11b      	bne.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e042      	b.n	8002b4c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02b      	beq.n	8002b2c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae2:	d123      	bne.n	8002b2c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002afc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e00f      	b.n	8002b4c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4013      	ands	r3, r2
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d092      	beq.n	8002a70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <__errno>:
 8002b54:	4b01      	ldr	r3, [pc, #4]	; (8002b5c <__errno+0x8>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4e0d      	ldr	r6, [pc, #52]	; (8002b98 <__libc_init_array+0x38>)
 8002b64:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b66:	1ba4      	subs	r4, r4, r6
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	2500      	movs	r5, #0
 8002b6c:	42a5      	cmp	r5, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	4e0b      	ldr	r6, [pc, #44]	; (8002ba0 <__libc_init_array+0x40>)
 8002b72:	4c0c      	ldr	r4, [pc, #48]	; (8002ba4 <__libc_init_array+0x44>)
 8002b74:	f000 ff04 	bl	8003980 <_init>
 8002b78:	1ba4      	subs	r4, r4, r6
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	2500      	movs	r5, #0
 8002b7e:	42a5      	cmp	r5, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b88:	4798      	blx	r3
 8002b8a:	3501      	adds	r5, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b92:	4798      	blx	r3
 8002b94:	3501      	adds	r5, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08003a64 	.word	0x08003a64
 8002b9c:	08003a64 	.word	0x08003a64
 8002ba0:	08003a64 	.word	0x08003a64
 8002ba4:	08003a68 	.word	0x08003a68

08002ba8 <memset>:
 8002ba8:	4402      	add	r2, r0
 8002baa:	4603      	mov	r3, r0
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <memset+0xa>
 8002bb0:	4770      	bx	lr
 8002bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb6:	e7f9      	b.n	8002bac <memset+0x4>

08002bb8 <iprintf>:
 8002bb8:	b40f      	push	{r0, r1, r2, r3}
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <iprintf+0x2c>)
 8002bbc:	b513      	push	{r0, r1, r4, lr}
 8002bbe:	681c      	ldr	r4, [r3, #0]
 8002bc0:	b124      	cbz	r4, 8002bcc <iprintf+0x14>
 8002bc2:	69a3      	ldr	r3, [r4, #24]
 8002bc4:	b913      	cbnz	r3, 8002bcc <iprintf+0x14>
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f000 f84e 	bl	8002c68 <__sinit>
 8002bcc:	ab05      	add	r3, sp, #20
 8002bce:	9a04      	ldr	r2, [sp, #16]
 8002bd0:	68a1      	ldr	r1, [r4, #8]
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f000 f955 	bl	8002e84 <_vfiprintf_r>
 8002bda:	b002      	add	sp, #8
 8002bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be0:	b004      	add	sp, #16
 8002be2:	4770      	bx	lr
 8002be4:	2000000c 	.word	0x2000000c

08002be8 <std>:
 8002be8:	2300      	movs	r3, #0
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4604      	mov	r4, r0
 8002bee:	e9c0 3300 	strd	r3, r3, [r0]
 8002bf2:	6083      	str	r3, [r0, #8]
 8002bf4:	8181      	strh	r1, [r0, #12]
 8002bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8002bf8:	81c2      	strh	r2, [r0, #14]
 8002bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bfe:	6183      	str	r3, [r0, #24]
 8002c00:	4619      	mov	r1, r3
 8002c02:	2208      	movs	r2, #8
 8002c04:	305c      	adds	r0, #92	; 0x5c
 8002c06:	f7ff ffcf 	bl	8002ba8 <memset>
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <std+0x38>)
 8002c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <std+0x3c>)
 8002c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <std+0x40>)
 8002c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <std+0x44>)
 8002c18:	6224      	str	r4, [r4, #32]
 8002c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c1c:	bd10      	pop	{r4, pc}
 8002c1e:	bf00      	nop
 8002c20:	080033e1 	.word	0x080033e1
 8002c24:	08003403 	.word	0x08003403
 8002c28:	0800343b 	.word	0x0800343b
 8002c2c:	0800345f 	.word	0x0800345f

08002c30 <_cleanup_r>:
 8002c30:	4901      	ldr	r1, [pc, #4]	; (8002c38 <_cleanup_r+0x8>)
 8002c32:	f000 b885 	b.w	8002d40 <_fwalk_reent>
 8002c36:	bf00      	nop
 8002c38:	08003739 	.word	0x08003739

08002c3c <__sfmoreglue>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	1e4a      	subs	r2, r1, #1
 8002c40:	2568      	movs	r5, #104	; 0x68
 8002c42:	4355      	muls	r5, r2
 8002c44:	460e      	mov	r6, r1
 8002c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c4a:	f000 f897 	bl	8002d7c <_malloc_r>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	b140      	cbz	r0, 8002c64 <__sfmoreglue+0x28>
 8002c52:	2100      	movs	r1, #0
 8002c54:	e9c0 1600 	strd	r1, r6, [r0]
 8002c58:	300c      	adds	r0, #12
 8002c5a:	60a0      	str	r0, [r4, #8]
 8002c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c60:	f7ff ffa2 	bl	8002ba8 <memset>
 8002c64:	4620      	mov	r0, r4
 8002c66:	bd70      	pop	{r4, r5, r6, pc}

08002c68 <__sinit>:
 8002c68:	6983      	ldr	r3, [r0, #24]
 8002c6a:	b510      	push	{r4, lr}
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	bb33      	cbnz	r3, 8002cbe <__sinit+0x56>
 8002c70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002c74:	6503      	str	r3, [r0, #80]	; 0x50
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <__sinit+0x58>)
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <__sinit+0x5c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6282      	str	r2, [r0, #40]	; 0x28
 8002c7e:	4298      	cmp	r0, r3
 8002c80:	bf04      	itt	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	6183      	streq	r3, [r0, #24]
 8002c86:	f000 f81f 	bl	8002cc8 <__sfp>
 8002c8a:	6060      	str	r0, [r4, #4]
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f000 f81b 	bl	8002cc8 <__sfp>
 8002c92:	60a0      	str	r0, [r4, #8]
 8002c94:	4620      	mov	r0, r4
 8002c96:	f000 f817 	bl	8002cc8 <__sfp>
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60e0      	str	r0, [r4, #12]
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	6860      	ldr	r0, [r4, #4]
 8002ca2:	f7ff ffa1 	bl	8002be8 <std>
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2109      	movs	r1, #9
 8002caa:	68a0      	ldr	r0, [r4, #8]
 8002cac:	f7ff ff9c 	bl	8002be8 <std>
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	2112      	movs	r1, #18
 8002cb4:	68e0      	ldr	r0, [r4, #12]
 8002cb6:	f7ff ff97 	bl	8002be8 <std>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61a3      	str	r3, [r4, #24]
 8002cbe:	bd10      	pop	{r4, pc}
 8002cc0:	080039c4 	.word	0x080039c4
 8002cc4:	08002c31 	.word	0x08002c31

08002cc8 <__sfp>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <__sfp+0x70>)
 8002ccc:	681e      	ldr	r6, [r3, #0]
 8002cce:	69b3      	ldr	r3, [r6, #24]
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	b913      	cbnz	r3, 8002cda <__sfp+0x12>
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	f7ff ffc7 	bl	8002c68 <__sinit>
 8002cda:	3648      	adds	r6, #72	; 0x48
 8002cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	d503      	bpl.n	8002cec <__sfp+0x24>
 8002ce4:	6833      	ldr	r3, [r6, #0]
 8002ce6:	b133      	cbz	r3, 8002cf6 <__sfp+0x2e>
 8002ce8:	6836      	ldr	r6, [r6, #0]
 8002cea:	e7f7      	b.n	8002cdc <__sfp+0x14>
 8002cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cf0:	b16d      	cbz	r5, 8002d0e <__sfp+0x46>
 8002cf2:	3468      	adds	r4, #104	; 0x68
 8002cf4:	e7f4      	b.n	8002ce0 <__sfp+0x18>
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	f7ff ff9f 	bl	8002c3c <__sfmoreglue>
 8002cfe:	6030      	str	r0, [r6, #0]
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d1f1      	bne.n	8002ce8 <__sfp+0x20>
 8002d04:	230c      	movs	r3, #12
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4604      	mov	r4, r0
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <__sfp+0x74>)
 8002d10:	6665      	str	r5, [r4, #100]	; 0x64
 8002d12:	e9c4 5500 	strd	r5, r5, [r4]
 8002d16:	60a5      	str	r5, [r4, #8]
 8002d18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002d1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002d20:	2208      	movs	r2, #8
 8002d22:	4629      	mov	r1, r5
 8002d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d28:	f7ff ff3e 	bl	8002ba8 <memset>
 8002d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d34:	e7e9      	b.n	8002d0a <__sfp+0x42>
 8002d36:	bf00      	nop
 8002d38:	080039c4 	.word	0x080039c4
 8002d3c:	ffff0001 	.word	0xffff0001

08002d40 <_fwalk_reent>:
 8002d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d44:	4680      	mov	r8, r0
 8002d46:	4689      	mov	r9, r1
 8002d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d4c:	2600      	movs	r6, #0
 8002d4e:	b914      	cbnz	r4, 8002d56 <_fwalk_reent+0x16>
 8002d50:	4630      	mov	r0, r6
 8002d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002d5a:	3f01      	subs	r7, #1
 8002d5c:	d501      	bpl.n	8002d62 <_fwalk_reent+0x22>
 8002d5e:	6824      	ldr	r4, [r4, #0]
 8002d60:	e7f5      	b.n	8002d4e <_fwalk_reent+0xe>
 8002d62:	89ab      	ldrh	r3, [r5, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d907      	bls.n	8002d78 <_fwalk_reent+0x38>
 8002d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	d003      	beq.n	8002d78 <_fwalk_reent+0x38>
 8002d70:	4629      	mov	r1, r5
 8002d72:	4640      	mov	r0, r8
 8002d74:	47c8      	blx	r9
 8002d76:	4306      	orrs	r6, r0
 8002d78:	3568      	adds	r5, #104	; 0x68
 8002d7a:	e7ee      	b.n	8002d5a <_fwalk_reent+0x1a>

08002d7c <_malloc_r>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	1ccd      	adds	r5, r1, #3
 8002d80:	f025 0503 	bic.w	r5, r5, #3
 8002d84:	3508      	adds	r5, #8
 8002d86:	2d0c      	cmp	r5, #12
 8002d88:	bf38      	it	cc
 8002d8a:	250c      	movcc	r5, #12
 8002d8c:	2d00      	cmp	r5, #0
 8002d8e:	4606      	mov	r6, r0
 8002d90:	db01      	blt.n	8002d96 <_malloc_r+0x1a>
 8002d92:	42a9      	cmp	r1, r5
 8002d94:	d903      	bls.n	8002d9e <_malloc_r+0x22>
 8002d96:	230c      	movs	r3, #12
 8002d98:	6033      	str	r3, [r6, #0]
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
 8002d9e:	f000 fd6b 	bl	8003878 <__malloc_lock>
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <_malloc_r+0xac>)
 8002da4:	6814      	ldr	r4, [r2, #0]
 8002da6:	4621      	mov	r1, r4
 8002da8:	b991      	cbnz	r1, 8002dd0 <_malloc_r+0x54>
 8002daa:	4c20      	ldr	r4, [pc, #128]	; (8002e2c <_malloc_r+0xb0>)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	b91b      	cbnz	r3, 8002db8 <_malloc_r+0x3c>
 8002db0:	4630      	mov	r0, r6
 8002db2:	f000 fb05 	bl	80033c0 <_sbrk_r>
 8002db6:	6020      	str	r0, [r4, #0]
 8002db8:	4629      	mov	r1, r5
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f000 fb00 	bl	80033c0 <_sbrk_r>
 8002dc0:	1c43      	adds	r3, r0, #1
 8002dc2:	d124      	bne.n	8002e0e <_malloc_r+0x92>
 8002dc4:	230c      	movs	r3, #12
 8002dc6:	6033      	str	r3, [r6, #0]
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f000 fd56 	bl	800387a <__malloc_unlock>
 8002dce:	e7e4      	b.n	8002d9a <_malloc_r+0x1e>
 8002dd0:	680b      	ldr	r3, [r1, #0]
 8002dd2:	1b5b      	subs	r3, r3, r5
 8002dd4:	d418      	bmi.n	8002e08 <_malloc_r+0x8c>
 8002dd6:	2b0b      	cmp	r3, #11
 8002dd8:	d90f      	bls.n	8002dfa <_malloc_r+0x7e>
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	50cd      	str	r5, [r1, r3]
 8002dde:	18cc      	adds	r4, r1, r3
 8002de0:	4630      	mov	r0, r6
 8002de2:	f000 fd4a 	bl	800387a <__malloc_unlock>
 8002de6:	f104 000b 	add.w	r0, r4, #11
 8002dea:	1d23      	adds	r3, r4, #4
 8002dec:	f020 0007 	bic.w	r0, r0, #7
 8002df0:	1ac3      	subs	r3, r0, r3
 8002df2:	d0d3      	beq.n	8002d9c <_malloc_r+0x20>
 8002df4:	425a      	negs	r2, r3
 8002df6:	50e2      	str	r2, [r4, r3]
 8002df8:	e7d0      	b.n	8002d9c <_malloc_r+0x20>
 8002dfa:	428c      	cmp	r4, r1
 8002dfc:	684b      	ldr	r3, [r1, #4]
 8002dfe:	bf16      	itet	ne
 8002e00:	6063      	strne	r3, [r4, #4]
 8002e02:	6013      	streq	r3, [r2, #0]
 8002e04:	460c      	movne	r4, r1
 8002e06:	e7eb      	b.n	8002de0 <_malloc_r+0x64>
 8002e08:	460c      	mov	r4, r1
 8002e0a:	6849      	ldr	r1, [r1, #4]
 8002e0c:	e7cc      	b.n	8002da8 <_malloc_r+0x2c>
 8002e0e:	1cc4      	adds	r4, r0, #3
 8002e10:	f024 0403 	bic.w	r4, r4, #3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d005      	beq.n	8002e24 <_malloc_r+0xa8>
 8002e18:	1a21      	subs	r1, r4, r0
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	f000 fad0 	bl	80033c0 <_sbrk_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d0cf      	beq.n	8002dc4 <_malloc_r+0x48>
 8002e24:	6025      	str	r5, [r4, #0]
 8002e26:	e7db      	b.n	8002de0 <_malloc_r+0x64>
 8002e28:	20000090 	.word	0x20000090
 8002e2c:	20000094 	.word	0x20000094

08002e30 <__sfputc_r>:
 8002e30:	6893      	ldr	r3, [r2, #8]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	b410      	push	{r4}
 8002e38:	6093      	str	r3, [r2, #8]
 8002e3a:	da08      	bge.n	8002e4e <__sfputc_r+0x1e>
 8002e3c:	6994      	ldr	r4, [r2, #24]
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	db01      	blt.n	8002e46 <__sfputc_r+0x16>
 8002e42:	290a      	cmp	r1, #10
 8002e44:	d103      	bne.n	8002e4e <__sfputc_r+0x1e>
 8002e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e4a:	f000 bb0d 	b.w	8003468 <__swbuf_r>
 8002e4e:	6813      	ldr	r3, [r2, #0]
 8002e50:	1c58      	adds	r0, r3, #1
 8002e52:	6010      	str	r0, [r2, #0]
 8002e54:	7019      	strb	r1, [r3, #0]
 8002e56:	4608      	mov	r0, r1
 8002e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <__sfputs_r>:
 8002e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e60:	4606      	mov	r6, r0
 8002e62:	460f      	mov	r7, r1
 8002e64:	4614      	mov	r4, r2
 8002e66:	18d5      	adds	r5, r2, r3
 8002e68:	42ac      	cmp	r4, r5
 8002e6a:	d101      	bne.n	8002e70 <__sfputs_r+0x12>
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e007      	b.n	8002e80 <__sfputs_r+0x22>
 8002e70:	463a      	mov	r2, r7
 8002e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e76:	4630      	mov	r0, r6
 8002e78:	f7ff ffda 	bl	8002e30 <__sfputc_r>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d1f3      	bne.n	8002e68 <__sfputs_r+0xa>
 8002e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e84 <_vfiprintf_r>:
 8002e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e88:	460c      	mov	r4, r1
 8002e8a:	b09d      	sub	sp, #116	; 0x74
 8002e8c:	4617      	mov	r7, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	4606      	mov	r6, r0
 8002e92:	b118      	cbz	r0, 8002e9c <_vfiprintf_r+0x18>
 8002e94:	6983      	ldr	r3, [r0, #24]
 8002e96:	b90b      	cbnz	r3, 8002e9c <_vfiprintf_r+0x18>
 8002e98:	f7ff fee6 	bl	8002c68 <__sinit>
 8002e9c:	4b7c      	ldr	r3, [pc, #496]	; (8003090 <_vfiprintf_r+0x20c>)
 8002e9e:	429c      	cmp	r4, r3
 8002ea0:	d158      	bne.n	8002f54 <_vfiprintf_r+0xd0>
 8002ea2:	6874      	ldr	r4, [r6, #4]
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	0718      	lsls	r0, r3, #28
 8002ea8:	d55e      	bpl.n	8002f68 <_vfiprintf_r+0xe4>
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d05b      	beq.n	8002f68 <_vfiprintf_r+0xe4>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002eba:	2330      	movs	r3, #48	; 0x30
 8002ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ec0:	9503      	str	r5, [sp, #12]
 8002ec2:	f04f 0b01 	mov.w	fp, #1
 8002ec6:	46b8      	mov	r8, r7
 8002ec8:	4645      	mov	r5, r8
 8002eca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ece:	b10b      	cbz	r3, 8002ed4 <_vfiprintf_r+0x50>
 8002ed0:	2b25      	cmp	r3, #37	; 0x25
 8002ed2:	d154      	bne.n	8002f7e <_vfiprintf_r+0xfa>
 8002ed4:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ed8:	d00b      	beq.n	8002ef2 <_vfiprintf_r+0x6e>
 8002eda:	4653      	mov	r3, sl
 8002edc:	463a      	mov	r2, r7
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f7ff ffbc 	bl	8002e5e <__sfputs_r>
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	f000 80c2 	beq.w	8003070 <_vfiprintf_r+0x1ec>
 8002eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eee:	4453      	add	r3, sl
 8002ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef2:	f898 3000 	ldrb.w	r3, [r8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80ba 	beq.w	8003070 <_vfiprintf_r+0x1ec>
 8002efc:	2300      	movs	r3, #0
 8002efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f06:	9304      	str	r3, [sp, #16]
 8002f08:	9307      	str	r3, [sp, #28]
 8002f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8002f10:	46a8      	mov	r8, r5
 8002f12:	2205      	movs	r2, #5
 8002f14:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002f18:	485e      	ldr	r0, [pc, #376]	; (8003094 <_vfiprintf_r+0x210>)
 8002f1a:	f7fd f979 	bl	8000210 <memchr>
 8002f1e:	9b04      	ldr	r3, [sp, #16]
 8002f20:	bb78      	cbnz	r0, 8002f82 <_vfiprintf_r+0xfe>
 8002f22:	06d9      	lsls	r1, r3, #27
 8002f24:	bf44      	itt	mi
 8002f26:	2220      	movmi	r2, #32
 8002f28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f2c:	071a      	lsls	r2, r3, #28
 8002f2e:	bf44      	itt	mi
 8002f30:	222b      	movmi	r2, #43	; 0x2b
 8002f32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f36:	782a      	ldrb	r2, [r5, #0]
 8002f38:	2a2a      	cmp	r2, #42	; 0x2a
 8002f3a:	d02a      	beq.n	8002f92 <_vfiprintf_r+0x10e>
 8002f3c:	9a07      	ldr	r2, [sp, #28]
 8002f3e:	46a8      	mov	r8, r5
 8002f40:	2000      	movs	r0, #0
 8002f42:	250a      	movs	r5, #10
 8002f44:	4641      	mov	r1, r8
 8002f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f4a:	3b30      	subs	r3, #48	; 0x30
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	d969      	bls.n	8003024 <_vfiprintf_r+0x1a0>
 8002f50:	b360      	cbz	r0, 8002fac <_vfiprintf_r+0x128>
 8002f52:	e024      	b.n	8002f9e <_vfiprintf_r+0x11a>
 8002f54:	4b50      	ldr	r3, [pc, #320]	; (8003098 <_vfiprintf_r+0x214>)
 8002f56:	429c      	cmp	r4, r3
 8002f58:	d101      	bne.n	8002f5e <_vfiprintf_r+0xda>
 8002f5a:	68b4      	ldr	r4, [r6, #8]
 8002f5c:	e7a2      	b.n	8002ea4 <_vfiprintf_r+0x20>
 8002f5e:	4b4f      	ldr	r3, [pc, #316]	; (800309c <_vfiprintf_r+0x218>)
 8002f60:	429c      	cmp	r4, r3
 8002f62:	bf08      	it	eq
 8002f64:	68f4      	ldreq	r4, [r6, #12]
 8002f66:	e79d      	b.n	8002ea4 <_vfiprintf_r+0x20>
 8002f68:	4621      	mov	r1, r4
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	f000 fae0 	bl	8003530 <__swsetup_r>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d09d      	beq.n	8002eb0 <_vfiprintf_r+0x2c>
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f78:	b01d      	add	sp, #116	; 0x74
 8002f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f7e:	46a8      	mov	r8, r5
 8002f80:	e7a2      	b.n	8002ec8 <_vfiprintf_r+0x44>
 8002f82:	4a44      	ldr	r2, [pc, #272]	; (8003094 <_vfiprintf_r+0x210>)
 8002f84:	1a80      	subs	r0, r0, r2
 8002f86:	fa0b f000 	lsl.w	r0, fp, r0
 8002f8a:	4318      	orrs	r0, r3
 8002f8c:	9004      	str	r0, [sp, #16]
 8002f8e:	4645      	mov	r5, r8
 8002f90:	e7be      	b.n	8002f10 <_vfiprintf_r+0x8c>
 8002f92:	9a03      	ldr	r2, [sp, #12]
 8002f94:	1d11      	adds	r1, r2, #4
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	9103      	str	r1, [sp, #12]
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	db01      	blt.n	8002fa2 <_vfiprintf_r+0x11e>
 8002f9e:	9207      	str	r2, [sp, #28]
 8002fa0:	e004      	b.n	8002fac <_vfiprintf_r+0x128>
 8002fa2:	4252      	negs	r2, r2
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	9207      	str	r2, [sp, #28]
 8002faa:	9304      	str	r3, [sp, #16]
 8002fac:	f898 3000 	ldrb.w	r3, [r8]
 8002fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8002fb2:	d10e      	bne.n	8002fd2 <_vfiprintf_r+0x14e>
 8002fb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8002fba:	d138      	bne.n	800302e <_vfiprintf_r+0x1aa>
 8002fbc:	9b03      	ldr	r3, [sp, #12]
 8002fbe:	1d1a      	adds	r2, r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	9203      	str	r2, [sp, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bfb8      	it	lt
 8002fc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002fcc:	f108 0802 	add.w	r8, r8, #2
 8002fd0:	9305      	str	r3, [sp, #20]
 8002fd2:	4d33      	ldr	r5, [pc, #204]	; (80030a0 <_vfiprintf_r+0x21c>)
 8002fd4:	f898 1000 	ldrb.w	r1, [r8]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f7fd f918 	bl	8000210 <memchr>
 8002fe0:	b140      	cbz	r0, 8002ff4 <_vfiprintf_r+0x170>
 8002fe2:	2340      	movs	r3, #64	; 0x40
 8002fe4:	1b40      	subs	r0, r0, r5
 8002fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8002fea:	9b04      	ldr	r3, [sp, #16]
 8002fec:	4303      	orrs	r3, r0
 8002fee:	f108 0801 	add.w	r8, r8, #1
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	f898 1000 	ldrb.w	r1, [r8]
 8002ff8:	482a      	ldr	r0, [pc, #168]	; (80030a4 <_vfiprintf_r+0x220>)
 8002ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ffe:	2206      	movs	r2, #6
 8003000:	f108 0701 	add.w	r7, r8, #1
 8003004:	f7fd f904 	bl	8000210 <memchr>
 8003008:	2800      	cmp	r0, #0
 800300a:	d037      	beq.n	800307c <_vfiprintf_r+0x1f8>
 800300c:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <_vfiprintf_r+0x224>)
 800300e:	bb1b      	cbnz	r3, 8003058 <_vfiprintf_r+0x1d4>
 8003010:	9b03      	ldr	r3, [sp, #12]
 8003012:	3307      	adds	r3, #7
 8003014:	f023 0307 	bic.w	r3, r3, #7
 8003018:	3308      	adds	r3, #8
 800301a:	9303      	str	r3, [sp, #12]
 800301c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800301e:	444b      	add	r3, r9
 8003020:	9309      	str	r3, [sp, #36]	; 0x24
 8003022:	e750      	b.n	8002ec6 <_vfiprintf_r+0x42>
 8003024:	fb05 3202 	mla	r2, r5, r2, r3
 8003028:	2001      	movs	r0, #1
 800302a:	4688      	mov	r8, r1
 800302c:	e78a      	b.n	8002f44 <_vfiprintf_r+0xc0>
 800302e:	2300      	movs	r3, #0
 8003030:	f108 0801 	add.w	r8, r8, #1
 8003034:	9305      	str	r3, [sp, #20]
 8003036:	4619      	mov	r1, r3
 8003038:	250a      	movs	r5, #10
 800303a:	4640      	mov	r0, r8
 800303c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003040:	3a30      	subs	r2, #48	; 0x30
 8003042:	2a09      	cmp	r2, #9
 8003044:	d903      	bls.n	800304e <_vfiprintf_r+0x1ca>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0c3      	beq.n	8002fd2 <_vfiprintf_r+0x14e>
 800304a:	9105      	str	r1, [sp, #20]
 800304c:	e7c1      	b.n	8002fd2 <_vfiprintf_r+0x14e>
 800304e:	fb05 2101 	mla	r1, r5, r1, r2
 8003052:	2301      	movs	r3, #1
 8003054:	4680      	mov	r8, r0
 8003056:	e7f0      	b.n	800303a <_vfiprintf_r+0x1b6>
 8003058:	ab03      	add	r3, sp, #12
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	4622      	mov	r2, r4
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <_vfiprintf_r+0x228>)
 8003060:	a904      	add	r1, sp, #16
 8003062:	4630      	mov	r0, r6
 8003064:	f3af 8000 	nop.w
 8003068:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800306c:	4681      	mov	r9, r0
 800306e:	d1d5      	bne.n	800301c <_vfiprintf_r+0x198>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	065b      	lsls	r3, r3, #25
 8003074:	f53f af7e 	bmi.w	8002f74 <_vfiprintf_r+0xf0>
 8003078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800307a:	e77d      	b.n	8002f78 <_vfiprintf_r+0xf4>
 800307c:	ab03      	add	r3, sp, #12
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	4622      	mov	r2, r4
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <_vfiprintf_r+0x228>)
 8003084:	a904      	add	r1, sp, #16
 8003086:	4630      	mov	r0, r6
 8003088:	f000 f888 	bl	800319c <_printf_i>
 800308c:	e7ec      	b.n	8003068 <_vfiprintf_r+0x1e4>
 800308e:	bf00      	nop
 8003090:	080039e8 	.word	0x080039e8
 8003094:	08003a28 	.word	0x08003a28
 8003098:	08003a08 	.word	0x08003a08
 800309c:	080039c8 	.word	0x080039c8
 80030a0:	08003a2e 	.word	0x08003a2e
 80030a4:	08003a32 	.word	0x08003a32
 80030a8:	00000000 	.word	0x00000000
 80030ac:	08002e5f 	.word	0x08002e5f

080030b0 <_printf_common>:
 80030b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	4691      	mov	r9, r2
 80030b6:	461f      	mov	r7, r3
 80030b8:	688a      	ldr	r2, [r1, #8]
 80030ba:	690b      	ldr	r3, [r1, #16]
 80030bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	bfb8      	it	lt
 80030c4:	4613      	movlt	r3, r2
 80030c6:	f8c9 3000 	str.w	r3, [r9]
 80030ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030ce:	4606      	mov	r6, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	b112      	cbz	r2, 80030da <_printf_common+0x2a>
 80030d4:	3301      	adds	r3, #1
 80030d6:	f8c9 3000 	str.w	r3, [r9]
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	0699      	lsls	r1, r3, #26
 80030de:	bf42      	ittt	mi
 80030e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030e4:	3302      	addmi	r3, #2
 80030e6:	f8c9 3000 	strmi.w	r3, [r9]
 80030ea:	6825      	ldr	r5, [r4, #0]
 80030ec:	f015 0506 	ands.w	r5, r5, #6
 80030f0:	d107      	bne.n	8003102 <_printf_common+0x52>
 80030f2:	f104 0a19 	add.w	sl, r4, #25
 80030f6:	68e3      	ldr	r3, [r4, #12]
 80030f8:	f8d9 2000 	ldr.w	r2, [r9]
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	42ab      	cmp	r3, r5
 8003100:	dc28      	bgt.n	8003154 <_printf_common+0xa4>
 8003102:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	3300      	adds	r3, #0
 800310a:	bf18      	it	ne
 800310c:	2301      	movne	r3, #1
 800310e:	0692      	lsls	r2, r2, #26
 8003110:	d42d      	bmi.n	800316e <_printf_common+0xbe>
 8003112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003116:	4639      	mov	r1, r7
 8003118:	4630      	mov	r0, r6
 800311a:	47c0      	blx	r8
 800311c:	3001      	adds	r0, #1
 800311e:	d020      	beq.n	8003162 <_printf_common+0xb2>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	68e5      	ldr	r5, [r4, #12]
 8003124:	f8d9 2000 	ldr.w	r2, [r9]
 8003128:	f003 0306 	and.w	r3, r3, #6
 800312c:	2b04      	cmp	r3, #4
 800312e:	bf08      	it	eq
 8003130:	1aad      	subeq	r5, r5, r2
 8003132:	68a3      	ldr	r3, [r4, #8]
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	bf0c      	ite	eq
 8003138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800313c:	2500      	movne	r5, #0
 800313e:	4293      	cmp	r3, r2
 8003140:	bfc4      	itt	gt
 8003142:	1a9b      	subgt	r3, r3, r2
 8003144:	18ed      	addgt	r5, r5, r3
 8003146:	f04f 0900 	mov.w	r9, #0
 800314a:	341a      	adds	r4, #26
 800314c:	454d      	cmp	r5, r9
 800314e:	d11a      	bne.n	8003186 <_printf_common+0xd6>
 8003150:	2000      	movs	r0, #0
 8003152:	e008      	b.n	8003166 <_printf_common+0xb6>
 8003154:	2301      	movs	r3, #1
 8003156:	4652      	mov	r2, sl
 8003158:	4639      	mov	r1, r7
 800315a:	4630      	mov	r0, r6
 800315c:	47c0      	blx	r8
 800315e:	3001      	adds	r0, #1
 8003160:	d103      	bne.n	800316a <_printf_common+0xba>
 8003162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316a:	3501      	adds	r5, #1
 800316c:	e7c3      	b.n	80030f6 <_printf_common+0x46>
 800316e:	18e1      	adds	r1, r4, r3
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	2030      	movs	r0, #48	; 0x30
 8003174:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003178:	4422      	add	r2, r4
 800317a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800317e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003182:	3302      	adds	r3, #2
 8003184:	e7c5      	b.n	8003112 <_printf_common+0x62>
 8003186:	2301      	movs	r3, #1
 8003188:	4622      	mov	r2, r4
 800318a:	4639      	mov	r1, r7
 800318c:	4630      	mov	r0, r6
 800318e:	47c0      	blx	r8
 8003190:	3001      	adds	r0, #1
 8003192:	d0e6      	beq.n	8003162 <_printf_common+0xb2>
 8003194:	f109 0901 	add.w	r9, r9, #1
 8003198:	e7d8      	b.n	800314c <_printf_common+0x9c>
	...

0800319c <_printf_i>:
 800319c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80031a4:	460c      	mov	r4, r1
 80031a6:	7e09      	ldrb	r1, [r1, #24]
 80031a8:	b085      	sub	sp, #20
 80031aa:	296e      	cmp	r1, #110	; 0x6e
 80031ac:	4617      	mov	r7, r2
 80031ae:	4606      	mov	r6, r0
 80031b0:	4698      	mov	r8, r3
 80031b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031b4:	f000 80b3 	beq.w	800331e <_printf_i+0x182>
 80031b8:	d822      	bhi.n	8003200 <_printf_i+0x64>
 80031ba:	2963      	cmp	r1, #99	; 0x63
 80031bc:	d036      	beq.n	800322c <_printf_i+0x90>
 80031be:	d80a      	bhi.n	80031d6 <_printf_i+0x3a>
 80031c0:	2900      	cmp	r1, #0
 80031c2:	f000 80b9 	beq.w	8003338 <_printf_i+0x19c>
 80031c6:	2958      	cmp	r1, #88	; 0x58
 80031c8:	f000 8083 	beq.w	80032d2 <_printf_i+0x136>
 80031cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031d4:	e032      	b.n	800323c <_printf_i+0xa0>
 80031d6:	2964      	cmp	r1, #100	; 0x64
 80031d8:	d001      	beq.n	80031de <_printf_i+0x42>
 80031da:	2969      	cmp	r1, #105	; 0x69
 80031dc:	d1f6      	bne.n	80031cc <_printf_i+0x30>
 80031de:	6820      	ldr	r0, [r4, #0]
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	0605      	lsls	r5, r0, #24
 80031e4:	f103 0104 	add.w	r1, r3, #4
 80031e8:	d52a      	bpl.n	8003240 <_printf_i+0xa4>
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	da03      	bge.n	80031fa <_printf_i+0x5e>
 80031f2:	222d      	movs	r2, #45	; 0x2d
 80031f4:	425b      	negs	r3, r3
 80031f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031fa:	486f      	ldr	r0, [pc, #444]	; (80033b8 <_printf_i+0x21c>)
 80031fc:	220a      	movs	r2, #10
 80031fe:	e039      	b.n	8003274 <_printf_i+0xd8>
 8003200:	2973      	cmp	r1, #115	; 0x73
 8003202:	f000 809d 	beq.w	8003340 <_printf_i+0x1a4>
 8003206:	d808      	bhi.n	800321a <_printf_i+0x7e>
 8003208:	296f      	cmp	r1, #111	; 0x6f
 800320a:	d020      	beq.n	800324e <_printf_i+0xb2>
 800320c:	2970      	cmp	r1, #112	; 0x70
 800320e:	d1dd      	bne.n	80031cc <_printf_i+0x30>
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f043 0320 	orr.w	r3, r3, #32
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	e003      	b.n	8003222 <_printf_i+0x86>
 800321a:	2975      	cmp	r1, #117	; 0x75
 800321c:	d017      	beq.n	800324e <_printf_i+0xb2>
 800321e:	2978      	cmp	r1, #120	; 0x78
 8003220:	d1d4      	bne.n	80031cc <_printf_i+0x30>
 8003222:	2378      	movs	r3, #120	; 0x78
 8003224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003228:	4864      	ldr	r0, [pc, #400]	; (80033bc <_printf_i+0x220>)
 800322a:	e055      	b.n	80032d8 <_printf_i+0x13c>
 800322c:	6813      	ldr	r3, [r2, #0]
 800322e:	1d19      	adds	r1, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6011      	str	r1, [r2, #0]
 8003234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800323c:	2301      	movs	r3, #1
 800323e:	e08c      	b.n	800335a <_printf_i+0x1be>
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6011      	str	r1, [r2, #0]
 8003244:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003248:	bf18      	it	ne
 800324a:	b21b      	sxthne	r3, r3
 800324c:	e7cf      	b.n	80031ee <_printf_i+0x52>
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	6825      	ldr	r5, [r4, #0]
 8003252:	1d18      	adds	r0, r3, #4
 8003254:	6010      	str	r0, [r2, #0]
 8003256:	0628      	lsls	r0, r5, #24
 8003258:	d501      	bpl.n	800325e <_printf_i+0xc2>
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	e002      	b.n	8003264 <_printf_i+0xc8>
 800325e:	0668      	lsls	r0, r5, #25
 8003260:	d5fb      	bpl.n	800325a <_printf_i+0xbe>
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	4854      	ldr	r0, [pc, #336]	; (80033b8 <_printf_i+0x21c>)
 8003266:	296f      	cmp	r1, #111	; 0x6f
 8003268:	bf14      	ite	ne
 800326a:	220a      	movne	r2, #10
 800326c:	2208      	moveq	r2, #8
 800326e:	2100      	movs	r1, #0
 8003270:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003274:	6865      	ldr	r5, [r4, #4]
 8003276:	60a5      	str	r5, [r4, #8]
 8003278:	2d00      	cmp	r5, #0
 800327a:	f2c0 8095 	blt.w	80033a8 <_printf_i+0x20c>
 800327e:	6821      	ldr	r1, [r4, #0]
 8003280:	f021 0104 	bic.w	r1, r1, #4
 8003284:	6021      	str	r1, [r4, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d13d      	bne.n	8003306 <_printf_i+0x16a>
 800328a:	2d00      	cmp	r5, #0
 800328c:	f040 808e 	bne.w	80033ac <_printf_i+0x210>
 8003290:	4665      	mov	r5, ip
 8003292:	2a08      	cmp	r2, #8
 8003294:	d10b      	bne.n	80032ae <_printf_i+0x112>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	07db      	lsls	r3, r3, #31
 800329a:	d508      	bpl.n	80032ae <_printf_i+0x112>
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	6862      	ldr	r2, [r4, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	bfde      	ittt	le
 80032a4:	2330      	movle	r3, #48	; 0x30
 80032a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80032ae:	ebac 0305 	sub.w	r3, ip, r5
 80032b2:	6123      	str	r3, [r4, #16]
 80032b4:	f8cd 8000 	str.w	r8, [sp]
 80032b8:	463b      	mov	r3, r7
 80032ba:	aa03      	add	r2, sp, #12
 80032bc:	4621      	mov	r1, r4
 80032be:	4630      	mov	r0, r6
 80032c0:	f7ff fef6 	bl	80030b0 <_printf_common>
 80032c4:	3001      	adds	r0, #1
 80032c6:	d14d      	bne.n	8003364 <_printf_i+0x1c8>
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032cc:	b005      	add	sp, #20
 80032ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032d2:	4839      	ldr	r0, [pc, #228]	; (80033b8 <_printf_i+0x21c>)
 80032d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032d8:	6813      	ldr	r3, [r2, #0]
 80032da:	6821      	ldr	r1, [r4, #0]
 80032dc:	1d1d      	adds	r5, r3, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6015      	str	r5, [r2, #0]
 80032e2:	060a      	lsls	r2, r1, #24
 80032e4:	d50b      	bpl.n	80032fe <_printf_i+0x162>
 80032e6:	07ca      	lsls	r2, r1, #31
 80032e8:	bf44      	itt	mi
 80032ea:	f041 0120 	orrmi.w	r1, r1, #32
 80032ee:	6021      	strmi	r1, [r4, #0]
 80032f0:	b91b      	cbnz	r3, 80032fa <_printf_i+0x15e>
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	f022 0220 	bic.w	r2, r2, #32
 80032f8:	6022      	str	r2, [r4, #0]
 80032fa:	2210      	movs	r2, #16
 80032fc:	e7b7      	b.n	800326e <_printf_i+0xd2>
 80032fe:	064d      	lsls	r5, r1, #25
 8003300:	bf48      	it	mi
 8003302:	b29b      	uxthmi	r3, r3
 8003304:	e7ef      	b.n	80032e6 <_printf_i+0x14a>
 8003306:	4665      	mov	r5, ip
 8003308:	fbb3 f1f2 	udiv	r1, r3, r2
 800330c:	fb02 3311 	mls	r3, r2, r1, r3
 8003310:	5cc3      	ldrb	r3, [r0, r3]
 8003312:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003316:	460b      	mov	r3, r1
 8003318:	2900      	cmp	r1, #0
 800331a:	d1f5      	bne.n	8003308 <_printf_i+0x16c>
 800331c:	e7b9      	b.n	8003292 <_printf_i+0xf6>
 800331e:	6813      	ldr	r3, [r2, #0]
 8003320:	6825      	ldr	r5, [r4, #0]
 8003322:	6961      	ldr	r1, [r4, #20]
 8003324:	1d18      	adds	r0, r3, #4
 8003326:	6010      	str	r0, [r2, #0]
 8003328:	0628      	lsls	r0, r5, #24
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	d501      	bpl.n	8003332 <_printf_i+0x196>
 800332e:	6019      	str	r1, [r3, #0]
 8003330:	e002      	b.n	8003338 <_printf_i+0x19c>
 8003332:	066a      	lsls	r2, r5, #25
 8003334:	d5fb      	bpl.n	800332e <_printf_i+0x192>
 8003336:	8019      	strh	r1, [r3, #0]
 8003338:	2300      	movs	r3, #0
 800333a:	6123      	str	r3, [r4, #16]
 800333c:	4665      	mov	r5, ip
 800333e:	e7b9      	b.n	80032b4 <_printf_i+0x118>
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	1d19      	adds	r1, r3, #4
 8003344:	6011      	str	r1, [r2, #0]
 8003346:	681d      	ldr	r5, [r3, #0]
 8003348:	6862      	ldr	r2, [r4, #4]
 800334a:	2100      	movs	r1, #0
 800334c:	4628      	mov	r0, r5
 800334e:	f7fc ff5f 	bl	8000210 <memchr>
 8003352:	b108      	cbz	r0, 8003358 <_printf_i+0x1bc>
 8003354:	1b40      	subs	r0, r0, r5
 8003356:	6060      	str	r0, [r4, #4]
 8003358:	6863      	ldr	r3, [r4, #4]
 800335a:	6123      	str	r3, [r4, #16]
 800335c:	2300      	movs	r3, #0
 800335e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003362:	e7a7      	b.n	80032b4 <_printf_i+0x118>
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	462a      	mov	r2, r5
 8003368:	4639      	mov	r1, r7
 800336a:	4630      	mov	r0, r6
 800336c:	47c0      	blx	r8
 800336e:	3001      	adds	r0, #1
 8003370:	d0aa      	beq.n	80032c8 <_printf_i+0x12c>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	079b      	lsls	r3, r3, #30
 8003376:	d413      	bmi.n	80033a0 <_printf_i+0x204>
 8003378:	68e0      	ldr	r0, [r4, #12]
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	4298      	cmp	r0, r3
 800337e:	bfb8      	it	lt
 8003380:	4618      	movlt	r0, r3
 8003382:	e7a3      	b.n	80032cc <_printf_i+0x130>
 8003384:	2301      	movs	r3, #1
 8003386:	464a      	mov	r2, r9
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	47c0      	blx	r8
 800338e:	3001      	adds	r0, #1
 8003390:	d09a      	beq.n	80032c8 <_printf_i+0x12c>
 8003392:	3501      	adds	r5, #1
 8003394:	68e3      	ldr	r3, [r4, #12]
 8003396:	9a03      	ldr	r2, [sp, #12]
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	42ab      	cmp	r3, r5
 800339c:	dcf2      	bgt.n	8003384 <_printf_i+0x1e8>
 800339e:	e7eb      	b.n	8003378 <_printf_i+0x1dc>
 80033a0:	2500      	movs	r5, #0
 80033a2:	f104 0919 	add.w	r9, r4, #25
 80033a6:	e7f5      	b.n	8003394 <_printf_i+0x1f8>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ac      	bne.n	8003306 <_printf_i+0x16a>
 80033ac:	7803      	ldrb	r3, [r0, #0]
 80033ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033b6:	e76c      	b.n	8003292 <_printf_i+0xf6>
 80033b8:	08003a39 	.word	0x08003a39
 80033bc:	08003a4a 	.word	0x08003a4a

080033c0 <_sbrk_r>:
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	4c06      	ldr	r4, [pc, #24]	; (80033dc <_sbrk_r+0x1c>)
 80033c4:	2300      	movs	r3, #0
 80033c6:	4605      	mov	r5, r0
 80033c8:	4608      	mov	r0, r1
 80033ca:	6023      	str	r3, [r4, #0]
 80033cc:	f7fd fba8 	bl	8000b20 <_sbrk>
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	d102      	bne.n	80033da <_sbrk_r+0x1a>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	b103      	cbz	r3, 80033da <_sbrk_r+0x1a>
 80033d8:	602b      	str	r3, [r5, #0]
 80033da:	bd38      	pop	{r3, r4, r5, pc}
 80033dc:	2000011c 	.word	0x2000011c

080033e0 <__sread>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	460c      	mov	r4, r1
 80033e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e8:	f000 fa96 	bl	8003918 <_read_r>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	bfab      	itete	ge
 80033f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033f2:	89a3      	ldrhlt	r3, [r4, #12]
 80033f4:	181b      	addge	r3, r3, r0
 80033f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033fa:	bfac      	ite	ge
 80033fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80033fe:	81a3      	strhlt	r3, [r4, #12]
 8003400:	bd10      	pop	{r4, pc}

08003402 <__swrite>:
 8003402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003406:	461f      	mov	r7, r3
 8003408:	898b      	ldrh	r3, [r1, #12]
 800340a:	05db      	lsls	r3, r3, #23
 800340c:	4605      	mov	r5, r0
 800340e:	460c      	mov	r4, r1
 8003410:	4616      	mov	r6, r2
 8003412:	d505      	bpl.n	8003420 <__swrite+0x1e>
 8003414:	2302      	movs	r3, #2
 8003416:	2200      	movs	r2, #0
 8003418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800341c:	f000 f9b6 	bl	800378c <_lseek_r>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800342a:	81a3      	strh	r3, [r4, #12]
 800342c:	4632      	mov	r2, r6
 800342e:	463b      	mov	r3, r7
 8003430:	4628      	mov	r0, r5
 8003432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003436:	f000 b869 	b.w	800350c <_write_r>

0800343a <__sseek>:
 800343a:	b510      	push	{r4, lr}
 800343c:	460c      	mov	r4, r1
 800343e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003442:	f000 f9a3 	bl	800378c <_lseek_r>
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	bf15      	itete	ne
 800344c:	6560      	strne	r0, [r4, #84]	; 0x54
 800344e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003456:	81a3      	strheq	r3, [r4, #12]
 8003458:	bf18      	it	ne
 800345a:	81a3      	strhne	r3, [r4, #12]
 800345c:	bd10      	pop	{r4, pc}

0800345e <__sclose>:
 800345e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003462:	f000 b8d3 	b.w	800360c <_close_r>
	...

08003468 <__swbuf_r>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	460e      	mov	r6, r1
 800346c:	4614      	mov	r4, r2
 800346e:	4605      	mov	r5, r0
 8003470:	b118      	cbz	r0, 800347a <__swbuf_r+0x12>
 8003472:	6983      	ldr	r3, [r0, #24]
 8003474:	b90b      	cbnz	r3, 800347a <__swbuf_r+0x12>
 8003476:	f7ff fbf7 	bl	8002c68 <__sinit>
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <__swbuf_r+0x98>)
 800347c:	429c      	cmp	r4, r3
 800347e:	d12a      	bne.n	80034d6 <__swbuf_r+0x6e>
 8003480:	686c      	ldr	r4, [r5, #4]
 8003482:	69a3      	ldr	r3, [r4, #24]
 8003484:	60a3      	str	r3, [r4, #8]
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	071a      	lsls	r2, r3, #28
 800348a:	d52e      	bpl.n	80034ea <__swbuf_r+0x82>
 800348c:	6923      	ldr	r3, [r4, #16]
 800348e:	b363      	cbz	r3, 80034ea <__swbuf_r+0x82>
 8003490:	6923      	ldr	r3, [r4, #16]
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	1ac0      	subs	r0, r0, r3
 8003496:	6963      	ldr	r3, [r4, #20]
 8003498:	b2f6      	uxtb	r6, r6
 800349a:	4283      	cmp	r3, r0
 800349c:	4637      	mov	r7, r6
 800349e:	dc04      	bgt.n	80034aa <__swbuf_r+0x42>
 80034a0:	4621      	mov	r1, r4
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 f948 	bl	8003738 <_fflush_r>
 80034a8:	bb28      	cbnz	r0, 80034f6 <__swbuf_r+0x8e>
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	6022      	str	r2, [r4, #0]
 80034b6:	701e      	strb	r6, [r3, #0]
 80034b8:	6963      	ldr	r3, [r4, #20]
 80034ba:	3001      	adds	r0, #1
 80034bc:	4283      	cmp	r3, r0
 80034be:	d004      	beq.n	80034ca <__swbuf_r+0x62>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	07db      	lsls	r3, r3, #31
 80034c4:	d519      	bpl.n	80034fa <__swbuf_r+0x92>
 80034c6:	2e0a      	cmp	r6, #10
 80034c8:	d117      	bne.n	80034fa <__swbuf_r+0x92>
 80034ca:	4621      	mov	r1, r4
 80034cc:	4628      	mov	r0, r5
 80034ce:	f000 f933 	bl	8003738 <_fflush_r>
 80034d2:	b190      	cbz	r0, 80034fa <__swbuf_r+0x92>
 80034d4:	e00f      	b.n	80034f6 <__swbuf_r+0x8e>
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <__swbuf_r+0x9c>)
 80034d8:	429c      	cmp	r4, r3
 80034da:	d101      	bne.n	80034e0 <__swbuf_r+0x78>
 80034dc:	68ac      	ldr	r4, [r5, #8]
 80034de:	e7d0      	b.n	8003482 <__swbuf_r+0x1a>
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <__swbuf_r+0xa0>)
 80034e2:	429c      	cmp	r4, r3
 80034e4:	bf08      	it	eq
 80034e6:	68ec      	ldreq	r4, [r5, #12]
 80034e8:	e7cb      	b.n	8003482 <__swbuf_r+0x1a>
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 f81f 	bl	8003530 <__swsetup_r>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d0cc      	beq.n	8003490 <__swbuf_r+0x28>
 80034f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80034fa:	4638      	mov	r0, r7
 80034fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034fe:	bf00      	nop
 8003500:	080039e8 	.word	0x080039e8
 8003504:	08003a08 	.word	0x08003a08
 8003508:	080039c8 	.word	0x080039c8

0800350c <_write_r>:
 800350c:	b538      	push	{r3, r4, r5, lr}
 800350e:	4c07      	ldr	r4, [pc, #28]	; (800352c <_write_r+0x20>)
 8003510:	4605      	mov	r5, r0
 8003512:	4608      	mov	r0, r1
 8003514:	4611      	mov	r1, r2
 8003516:	2200      	movs	r2, #0
 8003518:	6022      	str	r2, [r4, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	f7fd faaf 	bl	8000a7e <_write>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d102      	bne.n	800352a <_write_r+0x1e>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	b103      	cbz	r3, 800352a <_write_r+0x1e>
 8003528:	602b      	str	r3, [r5, #0]
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	2000011c 	.word	0x2000011c

08003530 <__swsetup_r>:
 8003530:	4b32      	ldr	r3, [pc, #200]	; (80035fc <__swsetup_r+0xcc>)
 8003532:	b570      	push	{r4, r5, r6, lr}
 8003534:	681d      	ldr	r5, [r3, #0]
 8003536:	4606      	mov	r6, r0
 8003538:	460c      	mov	r4, r1
 800353a:	b125      	cbz	r5, 8003546 <__swsetup_r+0x16>
 800353c:	69ab      	ldr	r3, [r5, #24]
 800353e:	b913      	cbnz	r3, 8003546 <__swsetup_r+0x16>
 8003540:	4628      	mov	r0, r5
 8003542:	f7ff fb91 	bl	8002c68 <__sinit>
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <__swsetup_r+0xd0>)
 8003548:	429c      	cmp	r4, r3
 800354a:	d10f      	bne.n	800356c <__swsetup_r+0x3c>
 800354c:	686c      	ldr	r4, [r5, #4]
 800354e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003552:	b29a      	uxth	r2, r3
 8003554:	0715      	lsls	r5, r2, #28
 8003556:	d42c      	bmi.n	80035b2 <__swsetup_r+0x82>
 8003558:	06d0      	lsls	r0, r2, #27
 800355a:	d411      	bmi.n	8003580 <__swsetup_r+0x50>
 800355c:	2209      	movs	r2, #9
 800355e:	6032      	str	r2, [r6, #0]
 8003560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003564:	81a3      	strh	r3, [r4, #12]
 8003566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800356a:	e03e      	b.n	80035ea <__swsetup_r+0xba>
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <__swsetup_r+0xd4>)
 800356e:	429c      	cmp	r4, r3
 8003570:	d101      	bne.n	8003576 <__swsetup_r+0x46>
 8003572:	68ac      	ldr	r4, [r5, #8]
 8003574:	e7eb      	b.n	800354e <__swsetup_r+0x1e>
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <__swsetup_r+0xd8>)
 8003578:	429c      	cmp	r4, r3
 800357a:	bf08      	it	eq
 800357c:	68ec      	ldreq	r4, [r5, #12]
 800357e:	e7e6      	b.n	800354e <__swsetup_r+0x1e>
 8003580:	0751      	lsls	r1, r2, #29
 8003582:	d512      	bpl.n	80035aa <__swsetup_r+0x7a>
 8003584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003586:	b141      	cbz	r1, 800359a <__swsetup_r+0x6a>
 8003588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800358c:	4299      	cmp	r1, r3
 800358e:	d002      	beq.n	8003596 <__swsetup_r+0x66>
 8003590:	4630      	mov	r0, r6
 8003592:	f000 f973 	bl	800387c <_free_r>
 8003596:	2300      	movs	r3, #0
 8003598:	6363      	str	r3, [r4, #52]	; 0x34
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	2300      	movs	r3, #0
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	6923      	ldr	r3, [r4, #16]
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	f043 0308 	orr.w	r3, r3, #8
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	b94b      	cbnz	r3, 80035ca <__swsetup_r+0x9a>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c0:	d003      	beq.n	80035ca <__swsetup_r+0x9a>
 80035c2:	4621      	mov	r1, r4
 80035c4:	4630      	mov	r0, r6
 80035c6:	f000 f917 	bl	80037f8 <__smakebuf_r>
 80035ca:	89a2      	ldrh	r2, [r4, #12]
 80035cc:	f012 0301 	ands.w	r3, r2, #1
 80035d0:	d00c      	beq.n	80035ec <__swsetup_r+0xbc>
 80035d2:	2300      	movs	r3, #0
 80035d4:	60a3      	str	r3, [r4, #8]
 80035d6:	6963      	ldr	r3, [r4, #20]
 80035d8:	425b      	negs	r3, r3
 80035da:	61a3      	str	r3, [r4, #24]
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	b953      	cbnz	r3, 80035f6 <__swsetup_r+0xc6>
 80035e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80035e8:	d1ba      	bne.n	8003560 <__swsetup_r+0x30>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	0792      	lsls	r2, r2, #30
 80035ee:	bf58      	it	pl
 80035f0:	6963      	ldrpl	r3, [r4, #20]
 80035f2:	60a3      	str	r3, [r4, #8]
 80035f4:	e7f2      	b.n	80035dc <__swsetup_r+0xac>
 80035f6:	2000      	movs	r0, #0
 80035f8:	e7f7      	b.n	80035ea <__swsetup_r+0xba>
 80035fa:	bf00      	nop
 80035fc:	2000000c 	.word	0x2000000c
 8003600:	080039e8 	.word	0x080039e8
 8003604:	08003a08 	.word	0x08003a08
 8003608:	080039c8 	.word	0x080039c8

0800360c <_close_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4c06      	ldr	r4, [pc, #24]	; (8003628 <_close_r+0x1c>)
 8003610:	2300      	movs	r3, #0
 8003612:	4605      	mov	r5, r0
 8003614:	4608      	mov	r0, r1
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	f7fd fa4d 	bl	8000ab6 <_close>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_close_r+0x1a>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	b103      	cbz	r3, 8003626 <_close_r+0x1a>
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	2000011c 	.word	0x2000011c

0800362c <__sflush_r>:
 800362c:	898a      	ldrh	r2, [r1, #12]
 800362e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003632:	4605      	mov	r5, r0
 8003634:	0710      	lsls	r0, r2, #28
 8003636:	460c      	mov	r4, r1
 8003638:	d458      	bmi.n	80036ec <__sflush_r+0xc0>
 800363a:	684b      	ldr	r3, [r1, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	dc05      	bgt.n	800364c <__sflush_r+0x20>
 8003640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	dc02      	bgt.n	800364c <__sflush_r+0x20>
 8003646:	2000      	movs	r0, #0
 8003648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800364c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800364e:	2e00      	cmp	r6, #0
 8003650:	d0f9      	beq.n	8003646 <__sflush_r+0x1a>
 8003652:	2300      	movs	r3, #0
 8003654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003658:	682f      	ldr	r7, [r5, #0]
 800365a:	6a21      	ldr	r1, [r4, #32]
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	d032      	beq.n	80036c6 <__sflush_r+0x9a>
 8003660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	075a      	lsls	r2, r3, #29
 8003666:	d505      	bpl.n	8003674 <__sflush_r+0x48>
 8003668:	6863      	ldr	r3, [r4, #4]
 800366a:	1ac0      	subs	r0, r0, r3
 800366c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800366e:	b10b      	cbz	r3, 8003674 <__sflush_r+0x48>
 8003670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003672:	1ac0      	subs	r0, r0, r3
 8003674:	2300      	movs	r3, #0
 8003676:	4602      	mov	r2, r0
 8003678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800367a:	6a21      	ldr	r1, [r4, #32]
 800367c:	4628      	mov	r0, r5
 800367e:	47b0      	blx	r6
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	d106      	bne.n	8003694 <__sflush_r+0x68>
 8003686:	6829      	ldr	r1, [r5, #0]
 8003688:	291d      	cmp	r1, #29
 800368a:	d848      	bhi.n	800371e <__sflush_r+0xf2>
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <__sflush_r+0x108>)
 800368e:	40ca      	lsrs	r2, r1
 8003690:	07d6      	lsls	r6, r2, #31
 8003692:	d544      	bpl.n	800371e <__sflush_r+0xf2>
 8003694:	2200      	movs	r2, #0
 8003696:	6062      	str	r2, [r4, #4]
 8003698:	04d9      	lsls	r1, r3, #19
 800369a:	6922      	ldr	r2, [r4, #16]
 800369c:	6022      	str	r2, [r4, #0]
 800369e:	d504      	bpl.n	80036aa <__sflush_r+0x7e>
 80036a0:	1c42      	adds	r2, r0, #1
 80036a2:	d101      	bne.n	80036a8 <__sflush_r+0x7c>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	b903      	cbnz	r3, 80036aa <__sflush_r+0x7e>
 80036a8:	6560      	str	r0, [r4, #84]	; 0x54
 80036aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ac:	602f      	str	r7, [r5, #0]
 80036ae:	2900      	cmp	r1, #0
 80036b0:	d0c9      	beq.n	8003646 <__sflush_r+0x1a>
 80036b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036b6:	4299      	cmp	r1, r3
 80036b8:	d002      	beq.n	80036c0 <__sflush_r+0x94>
 80036ba:	4628      	mov	r0, r5
 80036bc:	f000 f8de 	bl	800387c <_free_r>
 80036c0:	2000      	movs	r0, #0
 80036c2:	6360      	str	r0, [r4, #52]	; 0x34
 80036c4:	e7c0      	b.n	8003648 <__sflush_r+0x1c>
 80036c6:	2301      	movs	r3, #1
 80036c8:	4628      	mov	r0, r5
 80036ca:	47b0      	blx	r6
 80036cc:	1c41      	adds	r1, r0, #1
 80036ce:	d1c8      	bne.n	8003662 <__sflush_r+0x36>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0c5      	beq.n	8003662 <__sflush_r+0x36>
 80036d6:	2b1d      	cmp	r3, #29
 80036d8:	d001      	beq.n	80036de <__sflush_r+0xb2>
 80036da:	2b16      	cmp	r3, #22
 80036dc:	d101      	bne.n	80036e2 <__sflush_r+0xb6>
 80036de:	602f      	str	r7, [r5, #0]
 80036e0:	e7b1      	b.n	8003646 <__sflush_r+0x1a>
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	e7ad      	b.n	8003648 <__sflush_r+0x1c>
 80036ec:	690f      	ldr	r7, [r1, #16]
 80036ee:	2f00      	cmp	r7, #0
 80036f0:	d0a9      	beq.n	8003646 <__sflush_r+0x1a>
 80036f2:	0793      	lsls	r3, r2, #30
 80036f4:	680e      	ldr	r6, [r1, #0]
 80036f6:	bf08      	it	eq
 80036f8:	694b      	ldreq	r3, [r1, #20]
 80036fa:	600f      	str	r7, [r1, #0]
 80036fc:	bf18      	it	ne
 80036fe:	2300      	movne	r3, #0
 8003700:	eba6 0807 	sub.w	r8, r6, r7
 8003704:	608b      	str	r3, [r1, #8]
 8003706:	f1b8 0f00 	cmp.w	r8, #0
 800370a:	dd9c      	ble.n	8003646 <__sflush_r+0x1a>
 800370c:	4643      	mov	r3, r8
 800370e:	463a      	mov	r2, r7
 8003710:	6a21      	ldr	r1, [r4, #32]
 8003712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003714:	4628      	mov	r0, r5
 8003716:	47b0      	blx	r6
 8003718:	2800      	cmp	r0, #0
 800371a:	dc06      	bgt.n	800372a <__sflush_r+0xfe>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003728:	e78e      	b.n	8003648 <__sflush_r+0x1c>
 800372a:	4407      	add	r7, r0
 800372c:	eba8 0800 	sub.w	r8, r8, r0
 8003730:	e7e9      	b.n	8003706 <__sflush_r+0xda>
 8003732:	bf00      	nop
 8003734:	20400001 	.word	0x20400001

08003738 <_fflush_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	690b      	ldr	r3, [r1, #16]
 800373c:	4605      	mov	r5, r0
 800373e:	460c      	mov	r4, r1
 8003740:	b1db      	cbz	r3, 800377a <_fflush_r+0x42>
 8003742:	b118      	cbz	r0, 800374c <_fflush_r+0x14>
 8003744:	6983      	ldr	r3, [r0, #24]
 8003746:	b90b      	cbnz	r3, 800374c <_fflush_r+0x14>
 8003748:	f7ff fa8e 	bl	8002c68 <__sinit>
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <_fflush_r+0x48>)
 800374e:	429c      	cmp	r4, r3
 8003750:	d109      	bne.n	8003766 <_fflush_r+0x2e>
 8003752:	686c      	ldr	r4, [r5, #4]
 8003754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003758:	b17b      	cbz	r3, 800377a <_fflush_r+0x42>
 800375a:	4621      	mov	r1, r4
 800375c:	4628      	mov	r0, r5
 800375e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003762:	f7ff bf63 	b.w	800362c <__sflush_r>
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <_fflush_r+0x4c>)
 8003768:	429c      	cmp	r4, r3
 800376a:	d101      	bne.n	8003770 <_fflush_r+0x38>
 800376c:	68ac      	ldr	r4, [r5, #8]
 800376e:	e7f1      	b.n	8003754 <_fflush_r+0x1c>
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <_fflush_r+0x50>)
 8003772:	429c      	cmp	r4, r3
 8003774:	bf08      	it	eq
 8003776:	68ec      	ldreq	r4, [r5, #12]
 8003778:	e7ec      	b.n	8003754 <_fflush_r+0x1c>
 800377a:	2000      	movs	r0, #0
 800377c:	bd38      	pop	{r3, r4, r5, pc}
 800377e:	bf00      	nop
 8003780:	080039e8 	.word	0x080039e8
 8003784:	08003a08 	.word	0x08003a08
 8003788:	080039c8 	.word	0x080039c8

0800378c <_lseek_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4c07      	ldr	r4, [pc, #28]	; (80037ac <_lseek_r+0x20>)
 8003790:	4605      	mov	r5, r0
 8003792:	4608      	mov	r0, r1
 8003794:	4611      	mov	r1, r2
 8003796:	2200      	movs	r2, #0
 8003798:	6022      	str	r2, [r4, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f7fd f9b2 	bl	8000b04 <_lseek>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_lseek_r+0x1e>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_lseek_r+0x1e>
 80037a8:	602b      	str	r3, [r5, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	2000011c 	.word	0x2000011c

080037b0 <__swhatbuf_r>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	460e      	mov	r6, r1
 80037b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b8:	2900      	cmp	r1, #0
 80037ba:	b096      	sub	sp, #88	; 0x58
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	da07      	bge.n	80037d2 <__swhatbuf_r+0x22>
 80037c2:	2300      	movs	r3, #0
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	89b3      	ldrh	r3, [r6, #12]
 80037c8:	061a      	lsls	r2, r3, #24
 80037ca:	d410      	bmi.n	80037ee <__swhatbuf_r+0x3e>
 80037cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d0:	e00e      	b.n	80037f0 <__swhatbuf_r+0x40>
 80037d2:	466a      	mov	r2, sp
 80037d4:	f000 f8b2 	bl	800393c <_fstat_r>
 80037d8:	2800      	cmp	r0, #0
 80037da:	dbf2      	blt.n	80037c2 <__swhatbuf_r+0x12>
 80037dc:	9a01      	ldr	r2, [sp, #4]
 80037de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037e6:	425a      	negs	r2, r3
 80037e8:	415a      	adcs	r2, r3
 80037ea:	602a      	str	r2, [r5, #0]
 80037ec:	e7ee      	b.n	80037cc <__swhatbuf_r+0x1c>
 80037ee:	2340      	movs	r3, #64	; 0x40
 80037f0:	2000      	movs	r0, #0
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	b016      	add	sp, #88	; 0x58
 80037f6:	bd70      	pop	{r4, r5, r6, pc}

080037f8 <__smakebuf_r>:
 80037f8:	898b      	ldrh	r3, [r1, #12]
 80037fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037fc:	079d      	lsls	r5, r3, #30
 80037fe:	4606      	mov	r6, r0
 8003800:	460c      	mov	r4, r1
 8003802:	d507      	bpl.n	8003814 <__smakebuf_r+0x1c>
 8003804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	6123      	str	r3, [r4, #16]
 800380c:	2301      	movs	r3, #1
 800380e:	6163      	str	r3, [r4, #20]
 8003810:	b002      	add	sp, #8
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	ab01      	add	r3, sp, #4
 8003816:	466a      	mov	r2, sp
 8003818:	f7ff ffca 	bl	80037b0 <__swhatbuf_r>
 800381c:	9900      	ldr	r1, [sp, #0]
 800381e:	4605      	mov	r5, r0
 8003820:	4630      	mov	r0, r6
 8003822:	f7ff faab 	bl	8002d7c <_malloc_r>
 8003826:	b948      	cbnz	r0, 800383c <__smakebuf_r+0x44>
 8003828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800382c:	059a      	lsls	r2, r3, #22
 800382e:	d4ef      	bmi.n	8003810 <__smakebuf_r+0x18>
 8003830:	f023 0303 	bic.w	r3, r3, #3
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	e7e3      	b.n	8003804 <__smakebuf_r+0xc>
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <__smakebuf_r+0x7c>)
 800383e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	6020      	str	r0, [r4, #0]
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	9b00      	ldr	r3, [sp, #0]
 800384c:	6163      	str	r3, [r4, #20]
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	6120      	str	r0, [r4, #16]
 8003852:	b15b      	cbz	r3, 800386c <__smakebuf_r+0x74>
 8003854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003858:	4630      	mov	r0, r6
 800385a:	f000 f881 	bl	8003960 <_isatty_r>
 800385e:	b128      	cbz	r0, 800386c <__smakebuf_r+0x74>
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	431d      	orrs	r5, r3
 8003870:	81a5      	strh	r5, [r4, #12]
 8003872:	e7cd      	b.n	8003810 <__smakebuf_r+0x18>
 8003874:	08002c31 	.word	0x08002c31

08003878 <__malloc_lock>:
 8003878:	4770      	bx	lr

0800387a <__malloc_unlock>:
 800387a:	4770      	bx	lr

0800387c <_free_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4605      	mov	r5, r0
 8003880:	2900      	cmp	r1, #0
 8003882:	d045      	beq.n	8003910 <_free_r+0x94>
 8003884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003888:	1f0c      	subs	r4, r1, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfb8      	it	lt
 800388e:	18e4      	addlt	r4, r4, r3
 8003890:	f7ff fff2 	bl	8003878 <__malloc_lock>
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <_free_r+0x98>)
 8003896:	6813      	ldr	r3, [r2, #0]
 8003898:	4610      	mov	r0, r2
 800389a:	b933      	cbnz	r3, 80038aa <_free_r+0x2e>
 800389c:	6063      	str	r3, [r4, #4]
 800389e:	6014      	str	r4, [r2, #0]
 80038a0:	4628      	mov	r0, r5
 80038a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a6:	f7ff bfe8 	b.w	800387a <__malloc_unlock>
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	d90c      	bls.n	80038c8 <_free_r+0x4c>
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	1862      	adds	r2, r4, r1
 80038b2:	4293      	cmp	r3, r2
 80038b4:	bf04      	itt	eq
 80038b6:	681a      	ldreq	r2, [r3, #0]
 80038b8:	685b      	ldreq	r3, [r3, #4]
 80038ba:	6063      	str	r3, [r4, #4]
 80038bc:	bf04      	itt	eq
 80038be:	1852      	addeq	r2, r2, r1
 80038c0:	6022      	streq	r2, [r4, #0]
 80038c2:	6004      	str	r4, [r0, #0]
 80038c4:	e7ec      	b.n	80038a0 <_free_r+0x24>
 80038c6:	4613      	mov	r3, r2
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	b10a      	cbz	r2, 80038d0 <_free_r+0x54>
 80038cc:	42a2      	cmp	r2, r4
 80038ce:	d9fa      	bls.n	80038c6 <_free_r+0x4a>
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	1858      	adds	r0, r3, r1
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d10b      	bne.n	80038f0 <_free_r+0x74>
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	4401      	add	r1, r0
 80038dc:	1858      	adds	r0, r3, r1
 80038de:	4282      	cmp	r2, r0
 80038e0:	6019      	str	r1, [r3, #0]
 80038e2:	d1dd      	bne.n	80038a0 <_free_r+0x24>
 80038e4:	6810      	ldr	r0, [r2, #0]
 80038e6:	6852      	ldr	r2, [r2, #4]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	4401      	add	r1, r0
 80038ec:	6019      	str	r1, [r3, #0]
 80038ee:	e7d7      	b.n	80038a0 <_free_r+0x24>
 80038f0:	d902      	bls.n	80038f8 <_free_r+0x7c>
 80038f2:	230c      	movs	r3, #12
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	e7d3      	b.n	80038a0 <_free_r+0x24>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	1821      	adds	r1, r4, r0
 80038fc:	428a      	cmp	r2, r1
 80038fe:	bf04      	itt	eq
 8003900:	6811      	ldreq	r1, [r2, #0]
 8003902:	6852      	ldreq	r2, [r2, #4]
 8003904:	6062      	str	r2, [r4, #4]
 8003906:	bf04      	itt	eq
 8003908:	1809      	addeq	r1, r1, r0
 800390a:	6021      	streq	r1, [r4, #0]
 800390c:	605c      	str	r4, [r3, #4]
 800390e:	e7c7      	b.n	80038a0 <_free_r+0x24>
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	bf00      	nop
 8003914:	20000090 	.word	0x20000090

08003918 <_read_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4c07      	ldr	r4, [pc, #28]	; (8003938 <_read_r+0x20>)
 800391c:	4605      	mov	r5, r0
 800391e:	4608      	mov	r0, r1
 8003920:	4611      	mov	r1, r2
 8003922:	2200      	movs	r2, #0
 8003924:	6022      	str	r2, [r4, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	f7fd f88c 	bl	8000a44 <_read>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_read_r+0x1e>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	b103      	cbz	r3, 8003936 <_read_r+0x1e>
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	2000011c 	.word	0x2000011c

0800393c <_fstat_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4c07      	ldr	r4, [pc, #28]	; (800395c <_fstat_r+0x20>)
 8003940:	2300      	movs	r3, #0
 8003942:	4605      	mov	r5, r0
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	f7fd f8c0 	bl	8000ace <_fstat>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	d102      	bne.n	8003958 <_fstat_r+0x1c>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	b103      	cbz	r3, 8003958 <_fstat_r+0x1c>
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	bd38      	pop	{r3, r4, r5, pc}
 800395a:	bf00      	nop
 800395c:	2000011c 	.word	0x2000011c

08003960 <_isatty_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4c06      	ldr	r4, [pc, #24]	; (800397c <_isatty_r+0x1c>)
 8003964:	2300      	movs	r3, #0
 8003966:	4605      	mov	r5, r0
 8003968:	4608      	mov	r0, r1
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	f7fd f8bf 	bl	8000aee <_isatty>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_isatty_r+0x1a>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	b103      	cbz	r3, 800397a <_isatty_r+0x1a>
 8003978:	602b      	str	r3, [r5, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	2000011c 	.word	0x2000011c

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
